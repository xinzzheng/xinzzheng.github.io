<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JVM 知识图谱</title>
      <link href="/2019/05/06/JVM-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/"/>
      <url>/2019/05/06/JVM-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/</url>
      
        <content type="html"><![CDATA[<h2 id="JVM的内存结构"><a href="#JVM的内存结构" class="headerlink" title="JVM的内存结构"></a>JVM的内存结构</h2><blockquote><p>堆（Heap）：线程共享。所有的对象实例以及数组都要在堆上分配。回收器主要管理的对象。  </p></blockquote><blockquote><p>方法区（Method Area）：线程共享。存储类信息、常量、静态变量、即时编译器编译后的代码。</p></blockquote><blockquote><p>方法栈（JVM Stack）：线程私有。存储局部变量表、操作栈、动态链接、方法出口，对象指针。</p><p>本地方法栈（Native Method Stack）：线程私有。为虚拟机使用到的Native 方法服务。如Java使用c或者c++编写的接口服务时，代码在此区运行。</p><p>程序计数器（Program Counter Register）：线程私有。有些文章也翻译成PC寄存器（PC Register），同一个东西。它可以看作是当前线程所执行的字节码的行号指示器。指向下一条要执行的指令。</p></blockquote><a id="more"></a><p><img src="/2019/05/06/JVM-知识图谱/JVM内存模型.png" alt="JVM内存模型"></p><h2 id="Java创建对象的方法"><a href="#Java创建对象的方法" class="headerlink" title="Java创建对象的方法"></a>Java创建对象的方法</h2><ul><li><p>new</p><p>  <code>A a1 = new A();</code></p></li><li><p>反射</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">A a2 = (A)Class.forName(<span class="string">"A"</span>).newInstance();</span><br><span class="line"></span><br><span class="line">A a3 = A.class.newInstance();</span><br><span class="line"></span><br><span class="line">A a4 = A.class.getConstructor().newInstance();</span><br></pre></td></tr></table></figure></li><li><p>Clone</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">A a5 = (A) a4.clone();</span><br></pre></td></tr></table></figure></li><li><p>Deserialization</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">Cloneable</span>, <span class="title">Serializable</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ObjectOutputStream output = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"A"</span>));</span><br><span class="line">output.writeObject(a5);</span><br><span class="line">output.close();</span><br><span class="line"></span><br><span class="line">ObjectInputStream input = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"A"</span>));</span><br><span class="line">A a6 = (A) input.readObject();</span><br></pre></td></tr></table></figure></li></ul><h2 id="Java对象创建过程"><a href="#Java对象创建过程" class="headerlink" title="Java对象创建过程"></a>Java对象创建过程</h2>]]></content>
      
      
      <categories>
          
          <category> Java系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>序列化和反序列化的底层实现原理</title>
      <link href="/2019/05/06/%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
      <url>/2019/05/06/%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>序列化：对象序列化的最主要的用处就是在传递和保存对象的时候，保证对象的完整性和可传递性。序列化是把对象转换成有序字节流，以便在网络上传输或者保存在本地文件中。序列化后的字节流保存了Java对象的状态以及相关的描述信息。序列化机制的核心作用就是对象状态的保存与重建。  </p></blockquote><blockquote><p>反序列化：客户端从文件中或网络上获得序列化后的对象字节流后，根据字节流中所保存的对象状态及描述信息，通过反序列化重建对象。</p></blockquote><a id="more"></a><h4 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h4><ul><li><p>永久性保存对象，保存对象的字节序列到本地文件或者数据库中；</p></li><li><p>通过序列化以字节流的形式使对象在网络中进行传递和接收；</p></li><li><p>通过序列化在进程间传递对象；</p></li></ul><h4 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h4><ul><li>只有实现了Serializable或Externalizable接口的类的对象才能被序列化，否则抛出异常！</li></ul><h4 id="实现Java对象序列化与反序列化的方法"><a href="#实现Java对象序列化与反序列化的方法" class="headerlink" title="实现Java对象序列化与反序列化的方法"></a>实现Java对象序列化与反序列化的方法</h4><h5 id="实现了Serializable接口"><a href="#实现了Serializable接口" class="headerlink" title="实现了Serializable接口"></a>实现了Serializable接口</h5><ul><li><p>ObjectOutputStream采用默认的序列化方式，对Obj对象的非transient的实例变量进行序列化。</p></li><li><p>ObjcetInputStream采用默认的反序列化方式，对Obj对象的非transient的实例变量进行反序列化。</p></li></ul><h5 id="实现了Serializable接口，且还定义了readObject-writeObject"><a href="#实现了Serializable接口，且还定义了readObject-writeObject" class="headerlink" title="实现了Serializable接口，且还定义了readObject/writeObject"></a>实现了Serializable接口，且还定义了readObject/writeObject</h5><ul><li>ObjectOutputStream调用Obj对象的writeObject(ObjectOutputStream out)的方法进行序列化。</li><li>ObjectInputStream会调用Obj对象的readObject(ObjectInputStream in)的方法进行反序列化。</li></ul><h5 id="实现了Externalnalizable接口，必须实现readExternal-writeExternal"><a href="#实现了Externalnalizable接口，必须实现readExternal-writeExternal" class="headerlink" title="实现了Externalnalizable接口，必须实现readExternal/writeExternal"></a>实现了Externalnalizable接口，必须实现readExternal/writeExternal</h5><ul><li>ObjectOutputStream调用Obj对象的writeExternal(ObjectOutput out))的方法进行序列化。</li><li>ObjectInputStream会调用Obj对象的readExternal(ObjectInput in)的方法进行反序列化。</li></ul><h4 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h4><ol><li>序列化时，只对对象的状态进行保存，而不管对象的方法；</li><li>当一个父类实现序列化，子类自动实现序列化，不需要显式实现Serializable接口；</li><li>当一个对象的实例变量引用其他对象，序列化该对象时也把引用对象进行序列化；</li><li><p>并非所有的对象都可以序列化，至于为什么不可以，有很多原因了，比如：</p><ul><li><p>安全方面的原因，比如一个对象拥有private，public等field，对于一个要传输的对象，比如写到文件，或者进行RMI传输等等，在序列化进行传输的过程中，这个对象的private等域是不受保护的；</p></li><li><p>资源分配方面的原因，比如socket，thread类，如果可以序列化，进行传输或者保存，也无法对他们进行重新的资源分配，而且，也是没有必要这样实现；</p></li></ul></li><li><p>声明为static和transient类型的成员数据不能被序列化。因为static代表类的状态，transient代表对象的临时数据。</p></li><li><p>序列化运行时使用一个称为 serialVersionUID 的版本号与每个可序列化类相关联，该序列号在反序列化过程中用于验证序列化对象的发送者和接收者是否为该对象加载了与序列化兼容的类。为它赋予明确的值。显式地定义serialVersionUID有两种用途：</p><ul><li>在某些场合，希望类的不同版本对序列化兼容，因此需要确保类的不同版本具有相同的serialVersionUID；</li><li>在某些场合，不希望类的不同版本对序列化兼容，因此需要确保类的不同版本具有不同的serialVersionUID。</li></ul></li><li><p>Java有很多基础类已经实现了serializable接口，比如String,Vector等。但是也有一些没有实现serializable接口的；</p></li><li>如果一个对象的成员变量是一个对象，那么这个对象的数据成员也会被保存！这是能用序列化解决深拷贝的重要原因；</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 内容体系</title>
      <link href="/2019/05/06/Redis-%E5%86%85%E5%AE%B9%E4%BD%93%E7%B3%BB/"/>
      <url>/2019/05/06/Redis-%E5%86%85%E5%AE%B9%E4%BD%93%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<blockquote><p>REmote DIctionary Server(Redis) 是一个由Salvatore Sanfilippo写的key-value存储系统。<br>Redis是一个开源的使用ANSI 、C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p></blockquote><a id="more"></a><p><img src="/2019/05/06/Redis-内容体系/Redis知识图谱.png" alt="Redis 知识图谱"></p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><h3 id="速度快"><a href="#速度快" class="headerlink" title="速度快"></a>速度快</h3><ul><li>绝大部分请求是纯粹的内存操作，非常快速；</li><li>使用了很多查找操作都特别快的数据结构进行数据存储，Redis中的数据结构是专门设计的。如HashMap，查找、插入的时间复杂度都是O(1)；</li><li>采用单线程，避免了不必要的上下文切换和竞争条件，也不存在多进程或者多线程导致的切换而消耗CPU，不用去考虑各种锁的问题，不存在加锁、释放锁操作，没有因为可能出现死锁而导致的性能消耗；</li><li>用到了非阻塞I/O多路复用机制。</li></ul><h3 id="丰富的数据类型"><a href="#丰富的数据类型" class="headerlink" title="丰富的数据类型"></a>丰富的数据类型</h3><ul><li>String</li><li>List</li><li>Hash</li><li>set</li><li>zset</li></ul><h3 id="原子性，支持事务"><a href="#原子性，支持事务" class="headerlink" title="原子性，支持事务"></a>原子性，支持事务</h3><ul><li>Redis支持事务，并且它的所有操作都是原子性的，同时Redis还支持对几个操作合并后的原子性执行。</li></ul><h3 id="丰富的特性"><a href="#丰富的特性" class="headerlink" title="丰富的特性"></a>丰富的特性</h3><p>Redis具有丰富的特性，比如可以用作分布式锁；可以持久化数据；可以用作消息队列、排行榜、计数器；还支持publish/subscribe、通知、key过期等等。当我们要用中间件来解决实际问题的时候，Redis总能发挥出自己的用处。</p><h2 id="Redis和Memcache对比"><a href="#Redis和Memcache对比" class="headerlink" title="Redis和Memcache对比"></a>Redis和Memcache对比</h2><h3 id="存储方式"><a href="#存储方式" class="headerlink" title="存储方式"></a>存储方式</h3><ul><li>Memcache把数据全部存在内存之中，断电后会挂掉，无法做到数据的持久化，且数据不能超过内存大小。</li><li>Redis有一部分数据存在硬盘上，可以做到数据的持久性。</li></ul><h3 id="数据支持类型"><a href="#数据支持类型" class="headerlink" title="数据支持类型"></a>数据支持类型</h3><ul><li>Memcache对数据类型支持相对简单，只支持String类型的数据结构。</li><li>Redis有丰富的数据类型，包括：String、List、Hash、Set、Zset。</li></ul><h3 id="使用的底层模型"><a href="#使用的底层模型" class="headerlink" title="使用的底层模型"></a>使用的底层模型</h3><ul><li>它们之间底层实现方式以及与客户端之间通信的应用协议不一样。</li><li>Redis直接自己构建了VM机制 ，因为一般的系统调用系统函数，会浪费一定的时间去移动和请求。</li></ul><h3 id="存储值大小"><a href="#存储值大小" class="headerlink" title="存储值大小"></a>存储值大小</h3><ul><li>Redis最大可以存储1GB，而memcache只有1MB。</li></ul><h2 id="Redis存在的问题及解决方案"><a href="#Redis存在的问题及解决方案" class="headerlink" title="Redis存在的问题及解决方案"></a>Redis存在的问题及解决方案</h2><h3 id="缓存数据库的双写一致性的问题"><a href="#缓存数据库的双写一致性的问题" class="headerlink" title="缓存数据库的双写一致性的问题"></a>缓存数据库的双写一致性的问题</h3><blockquote><p>问题：一致性的问题是分布式系统中很常见的问题。一致性一般分为两种：强一致性和最终一致性，当我们要满足强一致性的时候，Redis也无法做到完美无瑕，因为数据库和缓存双写，肯定会出现不一致的情况，Redis只能保证最终一致性。</p></blockquote><ul><li><p>第一种方式是给缓存设置一定的过期时间，在缓存过期之后会自动查询数据库，保证数据库和缓存的一致性。</p></li><li><p>如果不设置过期时间的话，我们首先要选取正确的更新策略：先更新数据库再删除缓存。但我们删除缓存的时候也可能出现某些问题，所以需要将要删除的缓存的key放到消息队列中去，不断重试，直到删除成功为止。</p></li></ul><h3 id="缓存雪崩问题"><a href="#缓存雪崩问题" class="headerlink" title="缓存雪崩问题"></a>缓存雪崩问题</h3><blockquote><p>我们应该都在电影里看到过雪崩，开始很平静，然后一瞬间就开始崩塌，具有很强的毁灭性。这里也是一样的，我们执行代码的时候将很多缓存的实效时间设定成一样，接着这些缓存在同一时间都会实效，然后都会重新访问数据库更新数据，这样会导致数据库连接数过多、压力过大而崩溃。</p></blockquote><ul><li>设置缓存过期时间的时候加一个随机值。</li><li>设置双缓存，缓存1设置缓存时间，缓存2不设置，1过期后直接返回缓存2，并且启动一个进程去更新缓存1和2。</li></ul><h3 id="缓存穿透问题"><a href="#缓存穿透问题" class="headerlink" title="缓存穿透问题"></a>缓存穿透问题</h3><blockquote><p>缓存穿透是指一些非正常用户(黑客)故意去请求缓存中不存在的数据，导致所有的请求都集中到到数据库上，从而导致数据库连接异常。</p></blockquote><ul><li>利用互斥锁。缓存失效的时候，不能直接访问数据库，而是要先获取到锁，才能去请求数据库。没得到锁，则休眠一段时间后重试。</li><li>采用异步更新策略。无论key是否取到值，都直接返回。value值中维护一个缓存失效时间，缓存如果过期，异步起一个线程去读数据库，更新缓存。需要做缓存预热(项目启动前，先加载缓存)操作。</li><li>提供一个能迅速判断请求是否有效的拦截机制。比如利用布隆过滤器，内部维护一系列合法有效的key，迅速判断出请求所携带的Key是否合法有效。如果不合法，则直接返回。</li></ul><h3 id="缓存的并发竞争问题"><a href="#缓存的并发竞争问题" class="headerlink" title="缓存的并发竞争问题"></a>缓存的并发竞争问题</h3><blockquote></blockquote><p>缓存并发竞争的问题，主要发生在多线程对某个key进行set的时候，这时会出现数据不一致的情况。<br>比如Redis中我们存着一个key为amount的值，它的value是100，两个线程同时都对value加100然后更新，正确的结果应该是变为300。但是两个线程拿到这个值的时候都是100，最后结果也就是200，这就导致了缓存的并发竞争问题。</p><ul><li>如果多线程操作没有顺序要求的话，我们可以设置一个分布式锁，然后多个线程去争夺锁，谁先抢到锁谁就可以先执行。这个分布式锁可以用zookeeper或者Redis本身去实现。</li><li>可以利用Redis的incr命令。</li><li>当我们的多线程操作需要顺序的时候，我们可以设置一个消息队列，把需要的操作加到消息队列中去，严格按照队列的先后执行命令。</li></ul><h2 id="Redis的过期策略"><a href="#Redis的过期策略" class="headerlink" title="Redis的过期策略"></a>Redis的过期策略</h2><blockquote><p>Redis随着数据的增多，内存占用率会持续变高，我们以为一些键到达设置的删除时间就会被删除，但是时间到了，内存的占用率还是很高，这是为什么呢？</p></blockquote><ul><li>Redis采用的是定期删除和惰性删除的内存淘汰机制。</li></ul><h3 id="定期删除"><a href="#定期删除" class="headerlink" title="定期删除"></a>定期删除</h3><p>定期删除和定时删除是有区别的：</p><ul><li>定时删除是必须严格按照设定的时间去删除缓存，这就需要我们设置一个定时器去不断地轮询所有的key，判断是否需要进行删除。但是这样的话cpu的资源会被大幅度地占据，资源的利用率变低。所以我们选择采用定期删除，。</li><li>定期删除是时间由我们定，我们可以每隔100ms进行检查，但还是不能检查所有的缓存，Redis还是会卡死，只能随机地去检查一部分缓存，但是这样会有一些缓存无法在规定时间内删除。这时惰性删除就派上用场了。</li></ul><h3 id="惰性删除"><a href="#惰性删除" class="headerlink" title="惰性删除"></a>惰性删除</h3><p>举个简单的例子：中学的时候，平时作业太多，根本做不完，老师说下节课要讲这个卷子，你们都做完了吧？其实有很多人没做完，所以需要在下节课之前赶紧补上。  </p><p>惰性删除也是这个道理，我们的这个值按理说应该没了，但是它还在，当你要获取这个key的时候，发现这个key应该过期了，赶紧删了，然后返回一个’没有这个值，已经过期了!’。  </p><p>现在我们有了定期删除 + 惰性删除的过期策略，就可以高枕无忧了吗？并不是这样的，如果这个key一直不访问，那么它会一直滞留，也是不合理的，这就需要我们的内存淘汰机制了。</p><h3 id="Redis内存淘汰策略"><a href="#Redis内存淘汰策略" class="headerlink" title="Redis内存淘汰策略"></a>Redis内存淘汰策略</h3><p><img src="/2019/05/06/Redis-内容体系/Redis内存淘汰策略.png" alt="Redis内存淘汰策略"></p><p>在Redis.conf中我们可以进行配置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># maxmemory-policy allkeys-lru</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Redis系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot(二)</title>
      <link href="/2019/04/29/Spring-Boot-%E4%BA%8C/"/>
      <url>/2019/04/29/Spring-Boot-%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot-核心"><a href="#Spring-Boot-核心" class="headerlink" title="Spring Boot 核心"></a>Spring Boot 核心</h1><h2 id="为什么我们要用-Spring-Boot"><a href="#为什么我们要用-Spring-Boot" class="headerlink" title="为什么我们要用 Spring Boot"></a>为什么我们要用 Spring Boot</h2><a id="more"></a><ol><li>Spring Boot 最主要是不用 XML 配置，可以用 Java 来配置 bean，省去了许多配置文件。</li><li>Spring Boot 我们用来做 Spring Cloud 微服务。</li><li>Spring Boot 可以打 jar 包部署，内部集成了Tomcat。</li><li>Spring Boot 最重要的功能是：自动配置。</li></ol><ul><li><p>Spring Boot 的开启注解是：@SpringBootApplication，其实它就是由下面三个注解组成的：  </p><ul><li>@Configuration    </li><li>@ComponentScan</li><li><p>@EnableAutoConfiguration</p><p>上面三个注解，前面两个都是 Spring 自带的，和 Spring Boot 无关，所以说 Spring Boot 最最核心的就是这个 @EnableAutoConfiguration 注解了，它能根据类路径下的 jar 包和配置动态加载配置和注入bean。  </p><p>举个例子，比如我在 lib 下放一个 druid 连接池的 jar 包，然后在 application.yml 文件配置 druid 相关的参数，Spring Boot 就能够自动配置所有我们需要的东西，如果我把 jar 包拿掉或者把参数去掉，那 Spring Boot 就不会自动配置。<br>这样我们就能把许多功能做成公共的自动配置的启动器（starters），其实 druid 连接池就是这么做的，它提供了针对 Spring Boot 的启动器：druid-spring-boot-starter。<br>有了这个自动配置的启动器，我们就能非常简单的使用它，</p></li></ul></li></ul><h2 id="先添加-jar-包依赖："><a href="#先添加-jar-包依赖：" class="headerlink" title="先添加 jar 包依赖："></a>先添加 jar 包依赖：</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="再添加相关参数："><a href="#再添加相关参数：" class="headerlink" title="再添加相关参数："></a>再添加相关参数：</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.url= </span><br><span class="line">spring.datasource.username=</span><br><span class="line">spring.datasource.password=</span><br></pre></td></tr></table></figure><p>如果是传统的项目，我们要自己手动写一大堆的配置，而且还不灵活，有了这个启动器，我们就可以做到简单集成。</p>]]></content>
      
      
      <categories>
          
          <category> Spring Boot系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eclipse添加XML约束</title>
      <link href="/2019/04/27/Eclipse%E6%B7%BB%E5%8A%A0XML%E7%BA%A6%E6%9D%9F/"/>
      <url>/2019/04/27/Eclipse%E6%B7%BB%E5%8A%A0XML%E7%BA%A6%E6%9D%9F/</url>
      
        <content type="html"><![CDATA[<p>xml约束文件一般后缀名为.dtd或者.xsd，通过添加这些约束，可以方便我们在eclipse中编码xml文件（智能提示、格式错误提示等）。</p><a id="more"></a><ol><li>Preferences, 搜索框中输入”cata“</li><li>选中XML Catalog，点击右侧的Add，</li><li>选择File System…;Key type下拉列表中选Schema location：</li><li>Key中，把Location中的文件名（不包含路径）复制到添加‘/’的Key后面，点击OK</li><li>选择进入Design模式，右击beans标签，选择Edit namespace，点击Add，选中xsi，点击OK</li><li>再点Add，选择Specify New Namespace，在Location Hint的右侧选择Browse，选择Select XML Catalog entry，找到之前添加的约束，点击OK</li><li>将Namespace Name中输入Location Hint中没有文件名的路径名，点击OK</li></ol>]]></content>
      
      
      <categories>
          
          <category> Mac系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决Linux/macOS下zip文件解压中文乱码</title>
      <link href="/2019/04/26/%E8%A7%A3%E5%86%B3Linux-macOS%E4%B8%8Bzip%E6%96%87%E4%BB%B6%E8%A7%A3%E5%8E%8B%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/"/>
      <url>/2019/04/26/%E8%A7%A3%E5%86%B3Linux-macOS%E4%B8%8Bzip%E6%96%87%E4%BB%B6%E8%A7%A3%E5%8E%8B%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>很多网站下载的zip文件都是在Windows下打包的，这就为乱码的出现埋下了铺垫。这个问题表面上是由于Windows(中文系统)下使用cp936也就是GBK编码，而Linux以及macOS下使用UTF-8编码，但是追根究底还是因为zip格式在设计之初就没有为文件编码预留存储数据的位置，导致解压程序在解压时只能依照系统编码进行解压，这种情况下一旦跨平台解压就可能导致中文乱码。</p><a id="more"></a><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"></span><br><span class="line"><span class="comment"># print "Processing File " + sys.argv[1]</span></span><br><span class="line"></span><br><span class="line">file = zipfile.ZipFile(sys.argv[<span class="number">1</span>], <span class="string">"r"</span>)</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> file.namelist():</span><br><span class="line">    utf8name = name.decode(<span class="string">'gbk'</span>)</span><br><span class="line"><span class="comment">#    print "Extracting " + utf8name</span></span><br><span class="line">    pathname = os.path.dirname(utf8name)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(pathname) <span class="keyword">and</span> pathname != <span class="string">""</span>:</span><br><span class="line">        os.makedirs(pathname)</span><br><span class="line">    data = file.read(name)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(utf8name):</span><br><span class="line">        fo = open(utf8name, <span class="string">"w"</span>)</span><br><span class="line">        fo.write(data)</span><br><span class="line">        fo.close</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure><p><code>chmod 777 Myunzip.py</code><br><code>./Myunzip.py *.zip</code></p><h3 id="unar"><a href="#unar" class="headerlink" title="unar"></a>unar</h3><ol><li>安装brew<br><code>ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</code>    </li><li>安装unar<br><code>brew install unar</code>    </li><li>使用unar<br><code>unar -e GBK *.zip</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> Mac系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot(一)</title>
      <link href="/2019/04/26/Spring-Boot-%E4%B8%80/"/>
      <url>/2019/04/26/Spring-Boot-%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot-入门"><a href="#Spring-Boot-入门" class="headerlink" title="Spring Boot 入门"></a>Spring Boot 入门</h1><h2 id="Spring-Boot-介绍"><a href="#Spring-Boot-介绍" class="headerlink" title="Spring Boot 介绍"></a>Spring Boot 介绍</h2><blockquote><p>从本质上来说，Spring Boot就是Spring,它做了那些没有它你也会去做的Spring Bean配置。</p></blockquote><a id="more"></a><h3 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h3><ul><li>自动配置：针对很多Spring应用程序常见的应用功能，Spring Boot能自动提供相关配置</li><li>起步依赖：告诉Spring Boot需要什么功能，它就能引入需要的库。</li><li>命令行界面：这是Spring Boot的可选特性，借此你只需写代码就能完成完整的应用程序，无需传统项目构建。</li><li>Actuator：让你能够深入运行中的Spring Boot应用程序，一套究竟。</li></ul><h3 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h3><ul><li>Spring Boot 2.1.3</li><li>Java 8</li><li>Maven 3</li></ul><h3 id="快读入门"><a href="#快读入门" class="headerlink" title="快读入门"></a>快读入门</h3><h4 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xinzhe<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>SpringBoot_01<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>demo01<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="应用类"><a href="#应用类" class="headerlink" title="应用类"></a>应用类</h4>]]></content>
      
      
      <categories>
          
          <category> Spring Boot系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis-配置与启动</title>
      <link href="/2019/04/09/Redis-%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%90%AF%E5%8A%A8/"/>
      <url>/2019/04/09/Redis-%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%90%AF%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Mac下安装及配置redis"><a href="#Mac下安装及配置redis" class="headerlink" title="Mac下安装及配置redis"></a>Mac下安装及配置redis</h1><ul><li>下载 redis 安装包</li><li>拷贝压缩包到 【/usr/local 】目录；</li><li>解压缩 sudo tar -zxf redis-X.X.X.tar.gz;</li><li>进入解压缩后的目录 cd redis-X.X.X;</li><li>编译测试 sudo make test</li><li>编译安装 sudo make install</li></ul><a id="more"></a><ol><li>配置一，建立工作目录 【/usr/local/redis】（接下来的几步操作均以该目录为根目录）</li><li><p>配置二，进入工作目录，建立子目录：bin、etc、db，命令 sudo mkdir /usr/local/redis/目录名</p></li><li><p>配置三，把上面解压的 【redis-X.X.X/src】目录下的mkreleasehdr.sh、redis-benchmark、 redis-check-dump、 redis-cli、 redis-server 共 5 个文件 拷贝到【/usr/local/redis/bin】目录下</p></li><li>配置四，在 【etc】目录下建立 redis.conf 文件；<br>启动服务 bin/redis-server</li></ol><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><ol><li>启动服务端：redis-server /usr/local/redis-4.0.1/etc/redis.conf</li><li>关闭服务： redis-cli shutdown</li><li>查看日志文件：tail -f log-redis.log</li><li>检查是否启动：redis-cli ping</li><li>启动客户端： redis-cli</li><li>关闭客户端： quit</li></ol>]]></content>
      
      
      <categories>
          
          <category> Redis系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis-配置与启动</title>
      <link href="/2019/04/09/Spring%E7%AE%80%E4%BB%8B%E4%BB%A5%E5%8F%8A%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/04/09/Spring%E7%AE%80%E4%BB%8B%E4%BB%A5%E5%8F%8A%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><h3 id="IOC-和-DI"><a href="#IOC-和-DI" class="headerlink" title="IOC 和 DI"></a>IOC 和 DI</h3><ul><li>IOC： 控制反转，将对象的创建权反转给Spring。</li><li>DI:    依赖注入， 前提必须有IOC的环境，Spring管理这个类的时候将类的依赖的属性注入（设置）进来。</li></ul><a id="more"></a><ul><li>面向对象之间的关系：<ul><li>依赖</li><li>继承</li><li>聚合</li></ul></li></ul><h3 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h3><ul><li>ApplicationContext: 加载配置文件的时候，会将Spring管理的类都实例化。</li><li>ApplicationContext：实现类：<ul><li>ClassPathXmlApplicationContext : 类路径</li><li>FileSystemXmlApplicationContext    ：文件路径</li></ul></li></ul><h3 id="Bean的相关配置"><a href="#Bean的相关配置" class="headerlink" title="Bean的相关配置"></a>Bean的相关配置</h3><ul><li>id        : 唯一约束，无特殊字符</li><li>name        ：不唯一，可以特殊</li><li>class    : 实例全路径 </li></ul><h5 id="Bean-生命周期配置"><a href="#Bean-生命周期配置" class="headerlink" title="Bean 生命周期配置"></a>Bean 生命周期配置</h5><ul><li>init-method:    Bean被初始化的时候执行的方    </li><li>destroy-method    :Bean被销毁的时候执行的方法（Bean是<font color="red">单例创建</font>，工厂关闭）</li></ul><h5 id="Bean-作用范围配置"><a href="#Bean-作用范围配置" class="headerlink" title="Bean 作用范围配置"></a>Bean 作用范围配置</h5><ul><li>scope<ul><li>singleton     ： 单例模式创建对象</li><li>prototype    :  多例模式</li><li>request        ： 应用在web项目中，创建这个类后，将这个类存入request范围中。</li><li>session        :  应用在web项目中，创建这个类后，将这个类存入session范围中。</li><li>globalsession    ： 应用在web项目中，必须在porlet环境中使用。</li></ul></li></ul><h3 id="属性注入（DI）"><a href="#属性注入（DI）" class="headerlink" title="属性注入（DI）"></a>属性注入（DI）</h3><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><p>提供一个带参数的构造方法。</p><h4 id="setter"><a href="#setter" class="headerlink" title="setter"></a>setter</h4><p>提供set方法</p><h4 id="接口注入"><a href="#接口注入" class="headerlink" title="接口注入"></a>接口注入</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">injection</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">injection</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cookie and Session</title>
      <link href="/2019/04/08/Cookie-and-Session/"/>
      <url>/2019/04/08/Cookie-and-Session/</url>
      
        <content type="html"><![CDATA[<h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><h3 id="为什么要有Cookie"><a href="#为什么要有Cookie" class="headerlink" title="为什么要有Cookie"></a>为什么要有Cookie</h3><blockquote><p>http的请求是无状态。 客户端与服务器在通讯的时候，是无状态的，客户端在第二次来访的时候，服务器根本就不知道这个客户端以前有没有来访问过。 为了更好的用户体验，更好的交互 [自动登录]，其实从公司层面讲，就是为了更好的收集用户习惯.</p></blockquote><a id="more"></a><h3 id="Cookie怎么用"><a href="#Cookie怎么用" class="headerlink" title="Cookie怎么用"></a>Cookie怎么用</h3><ul><li><p>添加Cookie给客户端</p><ol><li>在响应的时候，添加cookie</li></ol></li></ul><pre><code>        Cookie cookie = new Cookie(&quot;aa&quot;, &quot;bb&quot;);        //给响应，添加一个cookie        response.addCookie(cookie);2. 客户端收到的信息里面，响应头中多了一个字段 Set-Cookie</code></pre><ul><li><p>获取客户端带过来的Cookie</p><pre><code>//获取客户端带过来的cookieCookie[] cookies = request.getCookies();if(cookies != null){    for (Cookie c : cookies) {        String cookieName = c.getName();        String cookieValue = c.getValue();        System.out.println(cookieName + &quot; = &quot;+ cookieValue);    }}</code></pre></li><li><p>常用方法</p></li></ul><pre><code>//关闭浏览器后，cookie就没有了。 ---&gt; 针对没有设置cookie的有效期。//    expiry： 有效 以秒计算。//正值 ： 表示 在这个数字过后，cookie将会失效。//负值： 关闭浏览器，那么cookie就失效， 默认值是 -1cookie.setMaxAge(60 * 60 * 24 * 7);//赋值新的值//cookie.setValue(newValue);//用于指定只有请求了指定的域名，才会带上该cookiecookie.setDomain(&quot;.itheima.com&quot;);//只有访问该域名下的cookieDemo的这个路径地址才会带cookiecookie.setPath(&quot;/CookieDemo&quot;);</code></pre><p>###Cookie总结</p><ol><li><p>服务器给客户端发送过来的一小份数据，并且存放在客户端上。</p></li><li><p>获取cookie， 添加cookie</p><p> request.getCookie();</p><p> response.addCookie();</p></li><li><p>Cookie分类</p><p> 会话Cookie</p><pre><code>默认情况下，关闭了浏览器，那么cookie就会消失。</code></pre><p> 持久Cookie</p><pre><code>在一定时间内，都有效，并且会保存在客户端上。 cookie.setMaxAge(0); //设置立即删除cookie.setMaxAge(100); //100 秒</code></pre></li><li><p>Cookie的安全问题。</p></li></ol><blockquote><p>由于Cookie会保存在客户端上，所以有安全隐患问题。  还有一个问题， Cookie的大小与个数有限制。 为了解决这个问题 —&gt; Session .</p></blockquote><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><blockquote><p>会话 ， Session是基于Cookie的一种会话机制。 Cookie是服务器返回一小份数据给客户端，并且存放在客户端上。 Session是，数据存放在服务器端。</p></blockquote><ul><li>常用API</li></ul><pre><code>//得到会话IDString id = session.getId();//存值session.setAttribute(name, value);//取值session.getAttribute(name);//移除值session.removeAttribute(name);</code></pre><ul><li><p>Session何时创建  ， 何时销毁?</p></li><li><p>创建</p></li></ul><blockquote><p>如果有在servlet里面调用了 request.getSession()</p></blockquote><ul><li>销毁</li></ul><blockquote><p>session 是存放在服务器的内存中的一份数据。 当然可以持久化. Redis . 即使关了浏览器，session也不会销毁。</p></blockquote><blockquote><ol><li>关闭服务器</li></ol></blockquote><blockquote><ol start="2"><li>session会话时间过期。 有效期过了，默认有效期： 30分钟。</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git Command</title>
      <link href="/2019/04/08/Git-Command/"/>
      <url>/2019/04/08/Git-Command/</url>
      
        <content type="html"><![CDATA[<h2 id="常用git命令"><a href="#常用git命令" class="headerlink" title="常用git命令"></a>常用git命令</h2><h3 id="常规操作："><a href="#常规操作：" class="headerlink" title="常规操作："></a>常规操作：</h3><a id="more"></a><ul><li><code>git clone &lt;地址&gt;</code></li><li>新建本地分支 <code>git checkout -b &lt;开发分支&gt;</code></li><li>更新远端分支 <code>git fetch</code></li><li>拉取远端的更新 <code>git pull origin &lt;分支名&gt;</code></li><li>切换本地分支 <code>git checkout &lt;分支名&gt;</code></li><li>合并主分支到当前分支 <code>git merge master</code></li><li>推送本地分支到远端 <code>git push origin &lt;开发分支&gt;</code></li><li>查看本地分支 <code>git branch</code></li><li><p>查看本地分支以及远端分支 <code>git branch -a</code></p></li><li><p><code>git config --global http.proxy http://cn-proxy.jp.oracle.com:80</code></p></li></ul><ul><li><p>创建本地跟踪分支 <code>git checkout -b branchname origin/branchname</code>  </p></li><li><p>删除本地分支 <code>git branch -D &lt;branch_name&gt;</code></p></li><li><p>重置工作区的一个文件到最近的一次提交 <code>git reset HEAD &lt;file&gt;</code></p></li><li><p>重置工作区的所有文件到最近的一次提交（注意最后的点） <code>git reset HEAD .</code></p></li><li><p>强制重置工作区的所有文件到最近的一次提交 <code>git reset --hard HEAD^</code><br><code>git checkout -- .</code><br><code>git push origin --delete &lt;branch_name&gt;</code><br><code>git push --force origin &lt;branch_name&gt;</code></p></li><li><p>恢复<br><code>git checkout origin/master -- ScoCore/ScoCore.jpr</code></p></li><li><p>删除远端分支 <code>git push origin --delete &lt;branch_name&gt;</code></p></li><li><p>强制更新远端分支 <code>git push --force origin &lt;branch_name&gt;</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Oracle Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Servlet页面跳转方法</title>
      <link href="/2019/04/08/Servlet%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC%E6%96%B9%E6%B3%95/"/>
      <url>/2019/04/08/Servlet%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Servlet-页面跳转的方法"><a href="#Servlet-页面跳转的方法" class="headerlink" title="Servlet 页面跳转的方法"></a>Servlet 页面跳转的方法</h1><h2 id="请求转发和重定向"><a href="#请求转发和重定向" class="headerlink" title="请求转发和重定向"></a>请求转发和重定向</h2><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><a id="more"></a><pre><code>    /*    之前的写法    response.setStatus(302);    response.setHeader(&quot;Location&quot;, &quot;login_success.html&quot;);*/    //重定向写法： 重新定位方向 参数即跳转的位置response.sendRedirect(&quot;login_success.html&quot;);1. 地址上显示的是最后的那个资源的路径地址2. 请求次数最少有两次， 服务器在第一次请求后，会返回302 以及一个地址， 浏览器在根据这个地址，执行第二次访问。3. 可以跳转到任意路径。 不是自己的工程也可以跳。4. 效率稍微低一点， 执行两次请求。 5. 后续的请求，没法使用上一次的request存储的数据，或者 没法使用上一次的request对象，因为这是两次不同的请求。</code></pre><h3 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h3><pre><code>//请求转发的写法： 参数即跳转的位置request.getRequestDispatcher(&quot;login_success.html&quot;).forward(request, response);1. 地址上显示的是请求servlet的地址。  返回200 ok2. 请求次数只有一次， 因为是服务器内部帮客户端执行了后续的工作。 3. 只能跳转自己项目的资源路径 。  4. 效率上稍微高一点，因为只执行一次请求。 5. 可以使用上一次的request对象。 </code></pre><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="1-RequestDispatcher-forward"><a href="#1-RequestDispatcher-forward" class="headerlink" title="1.RequestDispatcher.forward()"></a>1.RequestDispatcher.forward()</h3><ol><li>服务器端跳转</li><li>跳转至Servlet, Jsp, Html,</li><li>重定向后浏览器地址栏URL不变。</li><li>传递参数</li><li>通常在servlet中使用，不在jsp中使用。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException,IOException </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">　 response.setContentType(<span class="string">"text/html; charset=gb2312"</span>); </span><br><span class="line">　 ServletContext sc = getServletContext(); </span><br><span class="line">　 RequestDispatcher rd = <span class="keyword">null</span>; </span><br><span class="line">　 rd = sc.getRequestDispatcher(<span class="string">"/index.jsp"</span>); <span class="comment">//定向的页面 </span></span><br><span class="line">　 rd.forward(request, response); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-response-sendRedirect"><a href="#2-response-sendRedirect" class="headerlink" title="2.response.sendRedirect()"></a>2.response.sendRedirect()</h3><ol><li>用户的浏览器端工作</li><li>重定向后在浏览器地址栏上会出现重定向页面的URL</li><li>在jsp页面中可以用response.sendRedirect()直接实现重定位。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException,IOException </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">　 response.setContentType(<span class="string">"text/html; charset=gb2312"</span>); </span><br><span class="line">　 response.sendRedirect(<span class="string">"/index.jsp"</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-Jsp-＜jsp-forward-page-””-＞"><a href="#3-Jsp-＜jsp-forward-page-””-＞" class="headerlink" title="3.Jsp ＜jsp:forward page=”” /＞"></a>3.Jsp ＜jsp:forward page=”” /＞</h3><p>它的底层部分是由RequestDispatcher来实现的，因此它带有RequestDispatcher.forward()方法的印记。<br>　　<br>如果在之前有很多输出,前面的输出已使缓冲区满,将自动输出到客户端,那么该语句将不起作用,这一点应该特别注意。<br>　　<br>另外要注意：它不能改变浏览器地址，刷新的话会导致重复提交</p><h3 id="4-修改HTTP-header的Location属性来重定向"><a href="#4-修改HTTP-header的Location属性来重定向" class="headerlink" title="4.修改HTTP header的Location属性来重定向"></a>4.修改HTTP header的Location属性来重定向</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">＜% </span><br><span class="line">　response.setStatus(HttpServletResponse.SC_MOVED_PERMANENTLY); </span><br><span class="line">　String newLocn = <span class="string">"/newpath/jsa.jsp"</span>; </span><br><span class="line">　response.setHeader(<span class="string">"Location"</span>,newLocn); </span><br><span class="line">%＞</span><br></pre></td></tr></table></figure><h3 id="5-JSP中实现在某页面停留若干秒后-自动重定向到另一页面"><a href="#5-JSP中实现在某页面停留若干秒后-自动重定向到另一页面" class="headerlink" title="5.JSP中实现在某页面停留若干秒后,自动重定向到另一页面"></a>5.JSP中实现在某页面停留若干秒后,自动重定向到另一页面</h3><blockquote><p>在html文件中，下面的代码：<br><code>＜meta http-equiv=&quot;refresh&quot; content=&quot;300; url=target.jsp&quot;＞</code></p></blockquote><ul><li>它的含义：在5分钟之后正在浏览的页面将会自动变为target.html这一页。代码中300为刷新的延迟时间，以秒为单位。targer.html为你想转向的目标页,若为本页则为自动刷新本页。  </li></ul><p>由上可知，可以通过setHeader来实现某页面停留若干秒后,自动重定向到另一页面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String content=stayTime+<span class="string">";URL="</span>+URL; </span><br><span class="line">response.setHeader(<span class="string">"REFRESH"</span>,content);</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.imooc.com/article/2877" target="_blank" rel="noopener">JSP页面的五种跳转方法</a></p>]]></content>
      
      
      <categories>
          
          <category> Java Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac Eclipse 配置</title>
      <link href="/2019/04/08/Mac-Eclipse-%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/04/08/Mac-Eclipse-%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="Eclipse-代码自动提示设置"><a href="#Eclipse-代码自动提示设置" class="headerlink" title="Eclipse 代码自动提示设置"></a>Eclipse 代码自动提示设置</h2><a id="more"></a><ol><li>打开Eclipse，然后 “Eclipse” → “偏好设置”  </li><li>选择“java”，展开，“Editor”，选择“Content Assist”。  </li><li>选择“Content Assist”，然后看到右边，右边的“Auto-Activation”下面的“Auto Activation triggers for java”这个选项。其实就是指触发代码提示的就是“.”这个符号。  </li><li>“Auto Activation triggers for java”这个选项，在“.”后加abc字母，方便后面的查找修改。然后“apply”，点击“OK”。  </li><li>然后，“File”→“Export”，在弹出的窗口中选择 ”General“ → “Perferences” ，点击“下一步”。  </li><li>选择导出文件路径，本人导出到桌面，输入“test”作为文件名，点击“保存”。  </li><li>在桌面找到刚在保存的文件“test.epf”,右键选择“用记事本打开”。  </li><li>可以看到很多配置Eclipse的信息  </li><li>按“ctrl + F”快捷键，输入“.abc”，点击“查找下一个”。  </li><li>查找到“.abc”的配置信息如下：  </li><li>把“.abc”改成“.abcdefghijklmnopqrstuvwxyz(,”，保存，关闭“test.epf”。  </li><li>回到Eclipse界面，“File”→“Import”，在弹出的窗口中选择 ”General“ → “Perferences” ，点击“下一步”，选择刚在已经修改的“test.epf”文件，点击“打开”，点击“Finish”。该步骤和上面的导出步骤类似。</li></ol><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ul><li>快捷修复  </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Command+1 </span><br><span class="line"></span><br><span class="line">//int a=100L;</span><br><span class="line"></span><br><span class="line">//int a=(int) 100L;</span><br></pre></td></tr></table></figure><ul><li>快捷删除行</li></ul><p>Command+D </p><ul><li>快速起新行 </li></ul><p>Shift+Enter （当本行代码很长时，将光标定在本行任意位置，用这个快捷键可以快速到达新行的开头处）</p><ul><li>将光标快速放到正确格式的位置</li></ul><p>Tab键 当光标在行首时，用Tab键可以将光标快速放到正确格式的位置</p><ul><li>快速运行项目</li></ul><p>(Fn+)Command+F11 </p><p>//System.out.println(“Run2”);</p><ul><li>快速移动代码（可以多行）</li></ul><p>Alt+上下箭头 </p><ul><li>快速复制代码</li></ul><p>Command+Alt+上下箭头 </p><ul><li>快速注释 </li></ul><p>Command+/ </p><ul><li>多行注释或给方法列出参数注释</li></ul><p>输入”/**”+回车  </p><ul><li>放大当前工作区窗口 </li></ul><p>Ctrl+M </p><ul><li>快速代码补全</li></ul><p>Alt+/ </p><p>如：输入“syso” 然后用”Alt+/“,就可以将代码输入为“System.out.println();”</p><ul><li>自动导包</li></ul><p>ctrl+shift+o</p>]]></content>
      
      
      <categories>
          
          <category> Mac系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Http and Servlet</title>
      <link href="/2019/04/07/Http-and-Servlet/"/>
      <url>/2019/04/07/Http-and-Servlet/</url>
      
        <content type="html"><![CDATA[<h1 id="Http协议-amp-Servlet"><a href="#Http协议-amp-Servlet" class="headerlink" title="Http协议&amp;Servlet"></a>Http协议&amp;Servlet</h1><h1 id="Http协议"><a href="#Http协议" class="headerlink" title="Http协议"></a>Http协议</h1><ul><li>什么是协议</li></ul><blockquote><p>双方在交互、通讯的时候， 遵守的一种规范、规则。</p></blockquote><a id="more"></a><ul><li>http协议</li></ul><blockquote><p>针对网络上的客户端 与 服务器端在执行http请求的时候，遵守的一种规范。 其实就是规定了客户端在访问服务器端的时候，要带上哪些东西， 服务器端返回数据的时候，也要带上什么东西。 </p></blockquote><ul><li><p>版本</p><p>  1.0</p><pre><code>请求数据，服务器返回后， 将会断开连接</code></pre><p>  1.1</p><pre><code>请求数据，服务器返回后， 连接还会保持着。 除非服务器 | 客户端 关掉。 有一定的时间限制，如果都空着这个连接，那么后面会自己断掉。</code></pre></li></ul><h3 id="演示客户端-如何-与服务器端通讯。"><a href="#演示客户端-如何-与服务器端通讯。" class="headerlink" title="演示客户端 如何 与服务器端通讯。"></a>演示客户端 如何 与服务器端通讯。</h3><blockquote><p>在地址栏中键入网络地址 回车  或者是平常注册的时候，点击了注册按钮 ， 浏览器都能显示出来一些东西。那么背地里到底浏览器和服务器是怎么通讯。 它们都传输了哪些数据。</p></blockquote><ol><li><p>安装抓包工具 HttpWatch (IE插件)</p></li><li><p>打开tomcat. 输入localhost:8080 打开首页</p></li><li><p>在首页上找到Example 字样 </p></li></ol><blockquote><p>6.x 和 7.x 的文档页面有所不同，但是只要找到example就能够找到例子工程</p></blockquote><h3 id="Http请求数据解释"><a href="#Http请求数据解释" class="headerlink" title="Http请求数据解释"></a>Http请求数据解释</h3><blockquote><p>请求的数据里面包含三个部分内容 ： 请求行 、 请求头 、请求体</p></blockquote><ul><li><p>请求行</p><pre><code>POST /examples/servlets/servlet/RequestParamExample HTTP/1.1 POST ： 请求方式 ，以post去提交数据/examples/servlets/servlet/RequestParamExample请求的地址路径 ， 就是要访问哪个地方。HTTP/1.1 协议版本</code></pre></li><li><p>请求头</p><pre><code>Accept: application/x-ms-application, image/jpeg, application/xaml+xml, image/gif, image/pjpeg, application/x-ms-xbap, */*Referer: http://localhost:8080/examples/servlets/servlet/RequestParamExampleAccept-Language: zh-CNUser-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)Content-Type: application/x-www-form-urlencodedAccept-Encoding: gzip, deflateHost: localhost:8080Content-Length: 31Connection: Keep-AliveCache-Control: no-cacheAccept: 客户端向服务器端表示，我能支持什么类型的数据。 Referer ： 真正请求的地址路径，全路径Accept-Language: 支持语言格式User-Agent: 用户代理 向服务器表明，当前来访的客户端信息。 Content-Type： 提交的数据类型。经过urlencoding编码的form表单的数据Accept-Encoding： gzip, deflate ： 压缩算法 。 Host ： 主机地址Content-Length： 数据长度Connection : Keep-Alive 保持连接Cache-Control ： 对缓存的操作</code></pre></li><li><p>请求体</p></li></ul><blockquote><p>浏览器真正发送给服务器的数据 </p></blockquote><pre><code>发送的数据呈现的是key=value ,如果存在多个数据，那么使用 &amp;firstname=zhang&amp;lastname=sansan</code></pre><h3 id="Http响应数据解析"><a href="#Http响应数据解析" class="headerlink" title="Http响应数据解析"></a>Http响应数据解析</h3><blockquote><p>请求的数据里面包含三个部分内容 ： 响应行 、 响应头 、响应体</p></blockquote><pre><code>HTTP/1.1 200 OKServer: Apache-Coyote/1.1Content-Type: text/html;charset=ISO-8859-1Content-Length: 673Date: Fri, 17 Feb 2017 02:53:02 GMT...这里还有很多数据...</code></pre><ul><li><p>响应行</p><pre><code>HTTP/1.1 200 OK协议版本  状态码     咱们这次交互到底是什么样结果的一个code.     200 : 成功，正常处理，得到数据。    403 : Forbidden  拒绝    404 ： Not Found    500 ： 服务器异常OK    对应前面的状态码  </code></pre></li><li><p>响应头</p><pre><code>Server:  服务器是哪一种类型。  TomcatContent-Type ： 服务器返回给客户端你的内容类型Content-Length ： 返回的数据长度Date ： 通讯的日期，响应的时间        </code></pre></li></ul><h2 id="Get-和-Post请求区别"><a href="#Get-和-Post请求区别" class="headerlink" title="Get 和  Post请求区别"></a>Get 和  Post请求区别</h2><ul><li><p>post</p><pre><code>1. 数据是以流的方式写过去，不会在地址栏上面显示。  现在一般提交数据到服务器使用的都是POST2. 以流的方式写数据，所以数据没有大小限制。</code></pre></li><li><p>get</p><pre><code>1. 会在地址栏后面拼接数据，所以有安全隐患。 一般从服务器获取数据，并且客户端也不用提交上面数据的时候，可以使用GET2. 能够带的数据有限， 1kb大小</code></pre></li></ul><h3 id="Web资源"><a href="#Web资源" class="headerlink" title="Web资源"></a>Web资源</h3><p>在http协议当中，规定了请求和响应双方， 客户端和服务器端。与web相关的资源。 </p><p>有两种分类</p><ul><li><p>静态资源</p><p>  html 、 js、 css</p></li><li><p>动态资源</p><p>  servlet/jsp</p></li></ul><h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><ul><li>servlet是什么?</li></ul><blockquote><p>其实就是一个java程序，运行在我们的web服务器上，用于接收和响应 客户端的http请求。 </p></blockquote><blockquote><p>更多的是配合动态资源来做。 当然静态资源也需要使用到servlet，只不过是Tomcat里面已经定义好了一个 DefaultServlet</p></blockquote><h3 id="Hello-Servlet"><a href="#Hello-Servlet" class="headerlink" title="Hello Servlet"></a>Hello Servlet</h3><ol><li><p>得写一个Web工程 ， 要有一个服务器。</p></li><li><p>测试运行Web工程</p><pre><code>1. 新建一个类， 实现Servlet接口2. 配置Servlet ， 用意： 告诉服务器，我们的应用有这么些个servlet。    在webContent/WEB-INF/web.xml里面写上以下内容。</code></pre></li></ol><pre><code>  &lt;!-- 向tomcat报告， 我这个应用里面有这个servlet， 名字叫做HelloServlet , 具体的路径是com.itheima.servlet.HelloServlet --&gt;  &lt;servlet&gt;      &lt;servlet-name&gt;HelloServlet&lt;/servlet-name&gt;      &lt;servlet-class&gt;com.itheima.servlet.HelloServlet&lt;/servlet-class&gt;  &lt;/servlet&gt;  &lt;!-- 注册servlet的映射。  servletName : 找到上面注册的具体servlet，  url-pattern: 在地址栏上的path 一定要以/打头 --&gt;  &lt;servlet-mapping&gt;      &lt;servlet-name&gt;HelloServlet&lt;/servlet-name&gt;      &lt;url-pattern&gt;/a&lt;/url-pattern&gt;  &lt;/servlet-mapping&gt;3. 在地址栏上输入 http://localhost:8080/项目名称/a</code></pre><h3 id="Servlet的通用写法"><a href="#Servlet的通用写法" class="headerlink" title="Servlet的通用写法"></a>Servlet的通用写法</h3><pre><code>Servlet (接口)    |    |GenericServlet    |    |HttpServlet （用于处理http的请求）</code></pre><ol><li>定义一个类，继承HttpServlet 复写doGet 和 doPost</li></ol><h2 id="Servlet的生命周期"><a href="#Servlet的生命周期" class="headerlink" title="Servlet的生命周期"></a>Servlet的生命周期</h2><ul><li>生命周期</li></ul><blockquote><p>从创建到销毁的一段时间</p></blockquote><ul><li>生命周期方法</li></ul><blockquote><p>从创建到销毁，所调用的那些方法。</p></blockquote><ul><li><p>init方法</p><pre><code>在创建该servlet的实例时，就执行该方法。一个servlet只会初始化一次， init方法只会执行一次默认情况下是 ： 初次访问该servlet，才会创建实例。 </code></pre></li><li><p>service方法</p><pre><code>只要客户端来了一个请求，那么就执行这个方法了。  该方法可以被执行很多次。 一次请求，对应一次service方法的调用</code></pre></li><li><p>destroy方法</p></li></ul><pre><code>servlet销毁的时候，就会执行该方法    1. 该项目从tomcat的里面移除。    2. 正常关闭tomcat就会执行 shutdown.bat</code></pre><blockquote><p>doGet 和 doPost不算生命周期方法，所谓的生命周期方法是指，从对象的创建到销毁一定会执行的方法， 但是这两个方法，不一定会执行。</p></blockquote><h3 id="让Servlet创建实例的时机-提前。"><a href="#让Servlet创建实例的时机-提前。" class="headerlink" title="让Servlet创建实例的时机 提前。"></a>让Servlet创建实例的时机 提前。</h3><ol><li><p>默认情况下，只有在初次访问servlet的时候，才会执行init方法。 有的时候，我们可能需要在这个方法里面执行一些初始化工作，甚至是做一些比较耗时的逻辑。 </p></li><li><p>那么这个时候，初次访问，可能会在init方法中逗留太久的时间。 那么有没有方法可以让这个初始化的时机提前一点。 </p></li><li><p>在配置的时候， 使用load-on-startup元素来指定， 给定的数字越小，启动的时机就越早。 一般不写负数， 从2开始即可。 </p></li></ol><pre><code>&lt;servlet&gt;      &lt;servlet-name&gt;HelloServlet04&lt;/servlet-name&gt;      &lt;servlet-class&gt;com.itheima.servlet.HelloServlet04&lt;/servlet-class&gt;      &lt;load-on-startup&gt;2&lt;/load-on-startup&gt;  &lt;/servlet&gt;</code></pre><h2 id="ServletConfig"><a href="#ServletConfig" class="headerlink" title="ServletConfig"></a>ServletConfig</h2><blockquote><p>Servlet的配置，通过这个对象，可以获取servlet在配置的时候一些信息</p></blockquote><blockquote><p>先说 ， 在写怎么用， 最后说有什么用。</p></blockquote><pre><code>//1. 得到servlet配置对象 专门用于在配置servlet的信息ServletConfig config = getServletConfig();//获取到的是配置servlet里面servlet-name 的文本内容String servletName = config.getServletName();System.out.println(&quot;servletName=&quot;+servletName);//2、。 可以获取具体的某一个参数。 String address = config.getInitParameter(&quot;address&quot;);System.out.println(&quot;address=&quot;+address);//3.获取所有的参数名称Enumeration&lt;String&gt; names = config.getInitParameterNames();//遍历取出所有的参数名称while (names.hasMoreElements()) {    String key = (String) names.nextElement();    String value = config.getInitParameter(key);    System.out.println(&quot;key===&quot;+key + &quot;   value=&quot;+value);}</code></pre><h3 id="为什么需要有这个ServletConfig"><a href="#为什么需要有这个ServletConfig" class="headerlink" title="为什么需要有这个ServletConfig"></a>为什么需要有这个ServletConfig</h3><ol><li><p>未来我们自己开发的一些应用，使用到了一些技术，或者一些代码，我们不会。 但是有人写出来了。它的代码放置在了自己的servlet类里面。 </p></li><li><p>刚好这个servlet 里面需要一个数字或者叫做变量值。 但是这个值不能是固定了。 所以要求使用到这个servlet的公司，在注册servlet的时候，必须要在web.xml里面，声明init-params</p></li></ol><p>在开发当中比较少用。</p><p>刚才的这个实验， 希望基础好或者感兴趣的同学，回去自己做一下。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p>Http协议</p><pre><code>1. 使用HttpWacht 抓包看一看http请求背后的细节。 2. 基本了解 请求和响应的数据内容        请求行、 请求头 、请求体        响应行、响应头、响应体3. Get和Post的区别</code></pre></li><li><p>Servlet【重点】</p><pre><code>1. 会使用简单的servlet    1.写一个类，实现接口Servlet    2. 配置Servlet    3. 会访问Setvlet2. Servlet的生命周期    init 一次 创建对象 默认初次访问就会调用或者可以通过配置，让它提前 load-on-startup    service    多次，一次请求对应一次service    destory 一次 销毁的时候 从服务器移除 或者 正常关闭服务器3. ServletConfig    获取配置的信息， params</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XML and Tomcat</title>
      <link href="/2019/04/07/XML-and-Tomcat/"/>
      <url>/2019/04/07/XML-and-Tomcat/</url>
      
        <content type="html"><![CDATA[<h1 id="Xml-amp-Tomcat"><a href="#Xml-amp-Tomcat" class="headerlink" title="Xml &amp; Tomcat"></a>Xml &amp; Tomcat</h1><h2 id="Xml"><a href="#Xml" class="headerlink" title="Xml"></a>Xml</h2><blockquote><p>eXtendsible  markup language  可扩展的标记语言</p></blockquote><a id="more"></a><h3 id="XML-有什么用"><a href="#XML-有什么用" class="headerlink" title="XML 有什么用?"></a>XML 有什么用?</h3><ol><li><p>可以用来保存数据</p></li><li><p>可以用来做配置文件</p></li><li><p>数据传输载体</p></li></ol><p><img src="/2019/04/07/XML-and-Tomcat/document.png" alt="icon"></p><h2 id="定义xml"><a href="#定义xml" class="headerlink" title="定义xml"></a>定义xml</h2><blockquote><p>其实就是一个文件，文件的后缀为 .xml</p></blockquote><h3 id="文档声明"><a href="#文档声明" class="headerlink" title="文档声明"></a>文档声明</h3><pre><code>简单声明， version : 解析这个xml的时候，使用什么版本的解析器解析&lt;?xml version=&quot;1.0&quot; ?&gt;encoding : 解析xml中的文字的时候，使用什么编码来翻译&lt;?xml version=&quot;1.0&quot; encoding=&quot;gbk&quot; ?&gt;standalone  : no - 该文档会依赖关联其他文档 ，  yes-- 这是一个独立的文档&lt;?xml version=&quot;1.0&quot; encoding=&quot;gbk&quot; standalone=&quot;no&quot; ?&gt;</code></pre><h3 id="encoding详解"><a href="#encoding详解" class="headerlink" title="encoding详解"></a>encoding详解</h3><blockquote><p>在解析这个xml的时候，使用什么编码去解析。   —解码。 </p></blockquote><pre><code>文字， 而是存储这些文字对应的二进制 。 那么这些文字对应的二进制到底是多少呢？ 根据文件使用的编码 来得到。 </code></pre><blockquote><p>默认文件保存的时候，使用的是GBK的编码保存。 </p></blockquote><p>所以要想让我们的xml能够正常的显示中文，有两种解决办法</p><ol><li><p>让encoding也是GBK 或者 gb2312 . </p></li><li><p>如果encoding是 utf-8 ， 那么保存文件的时候也必须使用utf-8</p></li><li><p>保存的时候见到的ANSI 对应的其实是我们的本地编码 GBK。</p></li></ol><p>为了通用，建议使用UTF-8编码保存，以及encoding 都是 utf-8</p><h3 id="元素定义（标签）"><a href="#元素定义（标签）" class="headerlink" title="元素定义（标签）"></a>元素定义（标签）</h3><ol><li><p>其实就是里面的标签， &lt;&gt; 括起来的都叫元素 。 成对出现。  如下： </p><pre><code>&lt;stu&gt; &lt;/stu&gt;</code></pre></li><li><p>文档声明下来的第一个元素叫做根元素 (根标签)</p></li><li><p>标签里面可以嵌套标签</p></li><li><p>空标签</p><pre><code>既是开始也是结束。 一般配合属性来用。&lt;age/&gt;</code></pre></li></ol><pre><code>&lt;stu&gt;    &lt;name&gt;张三&lt;/name&gt;    &lt;age/&gt;&lt;/stu&gt;</code></pre><ol start="5"><li><p>标签可以自定义。 </p><p>XML 命名规则</p><pre><code>XML 元素必须遵循以下命名规则：名称可以含字母、数字以及其他的字符 名称不能以数字或者标点符号开始 名称不能以字符 “xml”（或者 XML、Xml）开始 名称不能包含空格 </code></pre></li></ol><pre><code>命名尽量简单，做到见名知义</code></pre><h3 id="简单元素-amp-复杂元素"><a href="#简单元素-amp-复杂元素" class="headerlink" title="简单元素  &amp; 复杂元素"></a>简单元素  &amp; 复杂元素</h3><ul><li>简单元素 </li></ul><blockquote><p>元素里面包含了普通的文字</p></blockquote><ul><li>复杂元素</li></ul><blockquote><p>元素里面还可以嵌套其他的元素</p></blockquote><h3 id="属性的定义"><a href="#属性的定义" class="headerlink" title="属性的定义"></a>属性的定义</h3><blockquote><p>定义在元素里面， &lt;元素名称  属性名称=”属性的值”&gt;&lt;/元素名称&gt;<br>        <stus><br>            <stu id="10086"><br>                <name>张三</name><br>                <age>18</age><br>            </stu><br>            <stu id="10087"><br>                <name>李四</name><br>                <age>28</age><br>            </stu><br>        </stus></p></blockquote><h2 id="xml注释："><a href="#xml注释：" class="headerlink" title="xml注释："></a>xml注释：</h2><blockquote><p>与html的注释一样。 </p></blockquote><pre><code>&lt;!-- --&gt; 如：     &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;    &lt;!--         //这里有两个学生        //一个学生，名字叫张三， 年龄18岁， 学号：10086        //另外一个学生叫李四  。。。     --&gt;</code></pre><blockquote><p>xml的注释，不允许放置在文档的第一行。 必须在文档声明的下面。</p></blockquote><h2 id="CDATA区"><a href="#CDATA区" class="headerlink" title="CDATA区"></a>CDATA区</h2><ul><li><p>非法字符</p><p>严格地讲，在 XML 中仅有字符 “&lt;”和”&amp;” 是非法的。省略号、引号和大于号是合法的，但是把它们替换为实体引用是个好的习惯。 </p><p>&lt;   &lt;<br>&amp;   &amp;</p></li></ul><p>如果某段字符串里面有过多的字符， 并且里面包含了类似标签或者关键字的这种文字，不想让xml的解析器去解析。 那么可以使用CDATA来包装。  不过这个CDATA 一般比较少看到。 通常在服务器给客户端返回数据的时候。</p><pre><code>&lt;des&gt;&lt;![CDATA[&lt;a href=&quot;http://www.baidu.com&quot;&gt;百度&lt;/a&gt;]]&gt;&lt;/des&gt;</code></pre><h2 id="XML-解析"><a href="#XML-解析" class="headerlink" title="XML 解析"></a>XML 解析</h2><blockquote><p>其实就是获取元素里面的字符数据或者属性数据。</p></blockquote><h3 id="XML解析方式-面试常问"><a href="#XML解析方式-面试常问" class="headerlink" title="XML解析方式(面试常问)"></a>XML解析方式(面试常问)</h3><blockquote><p>有很多种，但是常用的有两种。</p></blockquote><ul><li><p>DOM</p></li><li><p>SAX</p></li></ul><p><img src="/2019/04/07/XML-and-Tomcat/parse_type.png" alt="icon"></p><h3 id="针对这两种解析方式的API"><a href="#针对这两种解析方式的API" class="headerlink" title="针对这两种解析方式的API"></a>针对这两种解析方式的API</h3><blockquote><p>一些组织或者公司， 针对以上两种解析方式， 给出的解决方案有哪些？</p></blockquote><pre><code>jaxp  sun公司。 比较繁琐jdomdom4j  使用比较广泛</code></pre><h3 id="Dom4j-基本用法"><a href="#Dom4j-基本用法" class="headerlink" title="Dom4j 基本用法"></a>Dom4j 基本用法</h3><pre><code>element.element(&quot;stu&quot;) : 返回该元素下的第一个stu元素element.elements(); 返回该元素下的所有子元素。 </code></pre><ol><li><p>创建SaxReader对象</p></li><li><p>指定解析的xml</p></li><li><p>获取根元素。</p></li><li><p>根据根元素获取子元素或者下面的子孙元素</p></li></ol><pre><code>try {    //1. 创建sax读取对象    SAXReader reader = new SAXReader(); //jdbc -- classloader    //2. 指定解析的xml源    Document  document  = reader.read(new File(&quot;src/xml/stus.xml&quot;));    //3. 得到元素、    //得到根元素    Element rootElement= document.getRootElement();    //获取根元素下面的子元素 age//rootElement.element(&quot;age&quot;)     //System.out.println(rootElement.element(&quot;stu&quot;).element(&quot;age&quot;).getText());    //获取根元素下面的所有子元素 。 stu元素    List&lt;Element&gt; elements = rootElement.elements();    //遍历所有的stu元素    for (Element element : elements) {        //获取stu元素下面的name元素        String name = element.element(&quot;name&quot;).getText();        String age = element.element(&quot;age&quot;).getText();        String address = element.element(&quot;address&quot;).getText();        System.out.println(&quot;name=&quot;+name+&quot;==age+&quot;+age+&quot;==address=&quot;+address);    }} catch (Exception e) {    e.printStackTrace();}</code></pre><p>SaxReader 创建好对象 。  </p><p>Document<br>Element</p><ol><li><p>看文档</p></li><li><p>记住关键字 。</p></li><li><p>有对象先点一下。</p></li><li><p>看一下方法的返回值。 </p></li><li><p>根据平时的积累。  getXXX setXXX </p></li></ol><h3 id="Dom4j-的-Xpath使用"><a href="#Dom4j-的-Xpath使用" class="headerlink" title="Dom4j 的 Xpath使用"></a>Dom4j 的 Xpath使用</h3><blockquote><p> dom4j里面支持Xpath的写法。 xpath其实是xml的路径语言，支持我们在解析xml的时候，能够快速的定位到具体的某一个元素。</p></blockquote><ol><li><p>添加jar包依赖 </p><p>jaxen-1.1-beta-6.jar</p></li><li><p>在查找指定节点的时候，根据XPath语法规则来查找</p></li><li><p>后续的代码与以前的解析代码一样。</p></li></ol><pre><code>//要想使用Xpath， 还得添加支持的jar 获取的是第一个 只返回一个。 Element nameElement = (Element) rootElement.selectSingleNode(&quot;//name&quot;);System.out.println(nameElement.getText());System.out.println(&quot;----------------&quot;);//获取文档里面的所有name元素 List&lt;Element&gt; list = rootElement.selectNodes(&quot;//name&quot;);for (Element element : list) {    System.out.println(element.getText());}</code></pre><h2 id="XML-约束【了解】"><a href="#XML-约束【了解】" class="headerlink" title="XML 约束【了解】"></a>XML 约束【了解】</h2><p>如下的文档， 属性的ID值是一样的。 这在生活中是不可能出现的。 并且第二个学生的姓名有好几个。 一般也很少。那么怎么规定ID的值唯一， 或者是元素只能出现一次，不能出现多次？ 甚至是规定里面只能出现具体的元素名字。 </p><pre><code>&lt;stus&gt;    &lt;stu id=&quot;10086&quot;&gt;        &lt;name&gt;张三&lt;/name&gt;        &lt;age&gt;18&lt;/age&gt;        &lt;address&gt;深圳&lt;/address&gt;    &lt;/stu&gt;    &lt;stu id=&quot;10086&quot;&gt;        &lt;name&gt;李四&lt;/name&gt;        &lt;name&gt;李五&lt;/name&gt;        &lt;name&gt;李六&lt;/name&gt;        &lt;age&gt;28&lt;/age&gt;        &lt;address&gt;北京&lt;/address&gt;    &lt;/stu&gt;&lt;/stus&gt;</code></pre><h3 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h3><pre><code>语法自成一派， 早起就出现的。 可读性比较差。 </code></pre><ol><li><p>引入网络上的DTD</p><pre><code>&lt;!-- 引入dtd 来约束这个xml --&gt;&lt;!--    文档类型  根标签名字 网络上的dtd   dtd的名称   dtd的路径&lt;!DOCTYPE stus PUBLIC &quot;//UNKNOWN/&quot; &quot;unknown.dtd&quot;&gt; --&gt;</code></pre><ol start="2"><li><p>引入本地的DTD</p><!-- 引入本地的DTD  ： 根标签名字 引入本地的DTD  dtd的位置 --><!-- <!DOCTYPE stus SYSTEM "stus.dtd"> --></li></ol></li><li><p>直接在XML里面嵌入DTD的约束规则</p><pre><code>&lt;!-- xml文档里面直接嵌入DTD的约束法则 --&gt;&lt;!DOCTYPE stus [    &lt;!ELEMENT stus (stu)&gt;    &lt;!ELEMENT stu (name,age)&gt;    &lt;!ELEMENT name (#PCDATA)&gt;    &lt;!ELEMENT age (#PCDATA)&gt;]&gt;&lt;stus&gt;    &lt;stu&gt;        &lt;name&gt;张三&lt;/name&gt;        &lt;age&gt;18&lt;/age&gt;    &lt;/stu&gt;&lt;/stus&gt;</code></pre></li></ol><pre><code>&lt;!ELEMENT stus (stu)&gt;  : stus 下面有一个元素 stu  ， 但是只有一个&lt;!ELEMENT stu (name , age)&gt;  stu下面有两个元素 name  ,age  顺序必须name-age&lt;!ELEMENT name (#PCDATA)&gt; &lt;!ELEMENT age (#PCDATA)&gt;&lt;!ATTLIST stu id CDATA #IMPLIED&gt; stu有一个属性 文本类型， 该属性可有可无元素的个数：    ＋　一个或多个    *  零个或多个    ? 零个或一个属性的类型定义     CDATA : 属性是普通文字    ID : 属性的值必须唯一&lt;!ELEMENT stu (name , age)&gt;        按照顺序来 &lt;!ELEMENT stu (name | age)&gt;   两个中只能包含一个子元素</code></pre><h3 id="Schema"><a href="#Schema" class="headerlink" title="Schema"></a>Schema</h3><pre><code>其实就是一个xml ， 使用xml的语法规则， xml解析器解析起来比较方便 ， 是为了替代DTD 。但是Schema 约束文本内容比DTD的内容还要多。 所以目前也没有真正意义上的替代DTD约束文档：    &lt;!-- xmlns  :  xml namespace : 名称空间 /  命名空间    targetNamespace :  目标名称空间 。 下面定义的那些元素都与这个名称空间绑定上。     elementFormDefault ： 元素的格式化情况。  --&gt;    &lt;schema xmlns=&quot;http://www.w3.org/2001/XMLSchema&quot;         targetNamespace=&quot;http://www.itheima.com/teacher&quot;         elementFormDefault=&quot;qualified&quot;&gt;        &lt;element name=&quot;teachers&quot;&gt;            &lt;complexType&gt;                &lt;sequence maxOccurs=&quot;unbounded&quot;&gt;                    &lt;!-- 这是一个复杂元素 --&gt;                    &lt;element name=&quot;teacher&quot;&gt;                        &lt;complexType&gt;                            &lt;sequence&gt;                                &lt;!-- 以下两个是简单元素 --&gt;                                &lt;element name=&quot;name&quot; type=&quot;string&quot;&gt;&lt;/element&gt;                                &lt;element name=&quot;age&quot; type=&quot;int&quot;&gt;&lt;/element&gt;                            &lt;/sequence&gt;                        &lt;/complexType&gt;                    &lt;/element&gt;                &lt;/sequence&gt;            &lt;/complexType&gt;        &lt;/element&gt;    &lt;/schema&gt;实例文档：    &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;    &lt;!-- xmlns:xsi : 这里必须是这样的写法，也就是这个值已经固定了。    xmlns : 这里是名称空间，也固定了，写的是schema里面的顶部目标名称空间    xsi:schemaLocation : 有两段： 前半段是名称空间，也是目标空间的值 ， 后面是约束文档的路径。     --&gt;    &lt;teachers        xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;        xmlns=&quot;http://www.itheima.com/teacher&quot;        xsi:schemaLocation=&quot;http://www.itheima.com/teacher teacher.xsd&quot;    &gt;        &lt;teacher&gt;            &lt;name&gt;zhangsan&lt;/name&gt;            &lt;age&gt;19&lt;/age&gt;        &lt;/teacher&gt;        &lt;teacher&gt;            &lt;name&gt;lisi&lt;/name&gt;            &lt;age&gt;29&lt;/age&gt;        &lt;/teacher&gt;        &lt;teacher&gt;            &lt;name&gt;lisi&lt;/name&gt;            &lt;age&gt;29&lt;/age&gt;        &lt;/teacher&gt;    &lt;/teachers&gt;</code></pre><h2 id="名称空间的作用"><a href="#名称空间的作用" class="headerlink" title="名称空间的作用"></a>名称空间的作用</h2><p>一个xml如果想指定它的约束规则， 假设使用的是DTD ，那么这个xml只能指定一个DTD  ，  不能指定多个DTD 。 但是如果一个xml的约束是定义在schema里面，并且是多个schema，那么是可以的。简单的说： 一个xml 可以引用多个schema约束。 但是只能引用一个DTD约束。</p><p>名称空间的作用就是在 写元素的时候，可以指定该元素使用的是哪一套约束规则。  默认情况下 ，如果只有一套规则，那么都可以这么写</p><pre><code>&lt;name&gt;张三&lt;/name&gt;&lt;aa:name&gt;&lt;/aa:name&gt;&lt;bb:name&gt;&lt;/bb:name&gt;</code></pre><h3 id="程序架构"><a href="#程序架构" class="headerlink" title="程序架构"></a>程序架构</h3><p>网页游戏</p><ul><li>C/S(client/server)</li></ul><blockquote><p>QQ 微信 LOL</p></blockquote><p>优点：</p><pre><code>有一部分代码写在客户端， 用户体验比较好。 </code></pre><p>缺点： </p><pre><code>服务器更新，客户端也要随着更新。 占用资源大。 </code></pre><ul><li>B/S(browser/server)</li></ul><blockquote><p>网页游戏 ， WebQQ …</p></blockquote><p>优点： </p><pre><code>客户端只要有浏览器就可以了。     占用资源小， 不用更新。 </code></pre><p>缺点：</p><pre><code>用户体验不佳。 </code></pre><h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><blockquote><p>其实服务器就是一台电脑。 配置比一般的要好。</p></blockquote><h3 id="Web服务器软件"><a href="#Web服务器软件" class="headerlink" title="Web服务器软件"></a>Web服务器软件</h3><blockquote><p>客户端在浏览器的地址栏上输入地址 ，然后web服务器软件，接收请求，然后响应消息。<br>处理客户端的请求， 返回资源 | 信息</p></blockquote><p> Web应用  需要服务器支撑。 index.html</p><pre><code>Tomcat  apacheWebLogic BEAWebsphere IBM  IIS   微软</code></pre><h3 id="Tomcat安装"><a href="#Tomcat安装" class="headerlink" title="Tomcat安装"></a>Tomcat安装</h3><ol><li><p>直接解压 ，然后找到bin/startup.bat</p></li><li><p>可以安装</p></li></ol><p>启动之后，如果能够正常看到黑窗口，表明已经成功安装。 为了确保万无一失， 最好在浏览器的地址栏上输入 ： <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> , 如果有看到内容 就表明成功了。</p><ol start="3"><li>如果双击了startup.bat,  看到一闪而过的情形，一般都是 JDK的环境变量没有配置。 </li></ol><h3 id="Tomcat目录介绍"><a href="#Tomcat目录介绍" class="headerlink" title="Tomcat目录介绍"></a>Tomcat目录介绍</h3><p>bin##</p><pre><code>&gt; 包含了一些jar ,  bat文件 。  startup.bat</code></pre><p>conf##<br>​<br>        tomcat的配置     server.xml  web.xml</p><p>lib </p><pre><code>tomcat运行所需的jar文件</code></pre><p>logs</p><pre><code>运行的日志文件</code></pre><p>temp</p><pre><code>临时文件</code></pre><p>webapps##</p><pre><code>发布到tomcat服务器上的项目，就存放在这个目录。    </code></pre><p>work(目前不用管)</p><pre><code>jsp翻译成class文件存放地</code></pre><p>​    </p><h2 id="如何把一个项目发布到tomcat中"><a href="#如何把一个项目发布到tomcat中" class="headerlink" title="如何把一个项目发布到tomcat中"></a>如何把一个项目发布到tomcat中</h2><blockquote><p>需求： 如何能让其他的电脑访问我这台电脑上的资源 。 stu.xml</p></blockquote><pre><code>localhost : 本机地址</code></pre><h3 id="1-拷贝这个文件到webapps-ROOT底下，-在浏览器里面访问："><a href="#1-拷贝这个文件到webapps-ROOT底下，-在浏览器里面访问：" class="headerlink" title="1.  拷贝这个文件到webapps/ROOT底下， 在浏览器里面访问："></a>1.  拷贝这个文件到webapps/ROOT底下， 在浏览器里面访问：</h3><pre><code>    http://localhost:8080/stu.xml* 在webaps下面新建一个文件夹xml  , 然后拷贝文件放置到这个文件夹中</code></pre><p>​<br>        <a href="http://localhost:8080/xml/stu.xml" target="_blank" rel="noopener">http://localhost:8080/xml/stu.xml</a></p><pre><code>http://localhost:8080 ： 其实对应的是到webapps/roothttp://localhost:8080/xml/ : 对应是 webapps/xml使用IP地址访问：http://192.168.37.48:8080/xml/stu.xml</code></pre><h3 id="2-配置虚拟路径"><a href="#2-配置虚拟路径" class="headerlink" title="2. 配置虚拟路径"></a>2. 配置虚拟路径</h3><p>使用localhost：8080 打开tomcat首页， 在左侧找到tomcat的文档入口， 点击进去后， 在左侧接着找到 Context入口，点击进入。</p><pre><code>http://localhost:8080/docs/config/context.html</code></pre><ol><li><p>在conf/server.xml 找到host元素节点。</p></li><li><p>加入以下内容。</p></li></ol><pre><code>&lt;!-- docBase ：  项目的路径地址 如： D:\xml02\person.xmlpath : 对应的虚拟路径 一定要以/打头。对应的访问方式为： http://localhost:8080/a/person.xml --&gt;&lt;Context docBase=&quot;D:\xml02&quot; path=&quot;/a&quot;&gt;&lt;/Context&gt;</code></pre><ol start="3"><li>在浏览器地址栏上输入： <a href="http://localhost:8080/a/person.xml" target="_blank" rel="noopener">http://localhost:8080/a/person.xml</a></li></ol><h3 id="3-配置虚拟路径"><a href="#3-配置虚拟路径" class="headerlink" title="3. 配置虚拟路径"></a>3. 配置虚拟路径</h3><ol><li><p>在tomcat/conf/catalina/localhost/ 文件夹下新建一个xml文件，名字可以自己定义。 person.xml</p></li><li><p>在这个文件里面写入以下内容</p><pre><code>&lt;?xml version=&apos;1.0&apos; encoding=&apos;utf-8&apos;?&gt;&lt;Context docBase=&quot;D:\xml02&quot;&gt;&lt;/Context&gt;</code></pre></li><li><p>在浏览器上面访问</p><p><a href="http://localhost:8080/person/xml的名字即可" target="_blank" rel="noopener">http://localhost:8080/person/xml的名字即可</a></p></li></ol><h3 id="给Eclipse配置Tomcat"><a href="#给Eclipse配置Tomcat" class="headerlink" title="给Eclipse配置Tomcat"></a>给Eclipse配置Tomcat</h3><ol><li>在server里面 右键新建一个服务器， 选择到apache分类， 找到对应的tomcat版本， 接着一步一步配置即可。</li><li><p>配置完毕后， 在server 里面， 右键刚才的服务器，然后open  ， 找到上面的Server Location , 选择中间的 Use Tomcat installation…</p></li><li><p>创建web工程， 在WebContent下定义html文件， 右键工程， run as server </p></li></ol><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><pre><code>xml    1. 会定义xml    2. 会解析xml        dom4j  基本解析        Xpath手法tomcat    1. 会安装 ，会启动 ， 会访问。    2. 会设置虚拟路径    3. 给eclipse配置tomcat</code></pre><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> Java Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jsp中加入css和js</title>
      <link href="/2019/04/06/jsp%E4%B8%AD%E5%8A%A0%E5%85%A5css%E6%A0%B7%E5%BC%8F/"/>
      <url>/2019/04/06/jsp%E4%B8%AD%E5%8A%A0%E5%85%A5css%E6%A0%B7%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="1、-外部样式"><a href="#1、-外部样式" class="headerlink" title="1、 外部样式"></a>1、 外部样式</h4><p>当样式需要应用于很多页面时，外部样式表将是理想的选择。在使用外部样式表的情况下，你可以通过改变一个文件来改变整个站点的外观。每个页面使用<code>&lt;link&gt;</code>标签链接到样式表。<code>&lt;link&gt;</code>标签在（文档的）头部：</p><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>  <span class="attr">type</span>=<span class="string">"text/css"</span>  <span class="attr">href</span>=<span class="string">"path/myCss.css"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2、内部样式"><a href="#2、内部样式" class="headerlink" title="2、内部样式"></a>2、内部样式</h4><p>当单个文档需要特殊的样式时，就应该使用内部样式表。可以使用<code>&lt;style&gt;</code>标签在文档头部定义内部样式表。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">样式</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="3、内联样式"><a href="#3、内联样式" class="headerlink" title="3、内联样式"></a>3、内联样式</h4><p>当样式仅需要在一个元素上应用一次时, 要使用内联样式，你需要在相关的标签内使用样式（style）属性。Style属性可以包含任何CSS属性。由于要将表现和内容混杂在一起，内联样式会损失掉样式表的许多优势。请慎用这种方法<br><code>&lt;div style=&quot;width:100px&quot;&gt;&lt;/div&gt;</code></p><p><strong>内联样式的优先级最高，其次是内部样式，外部样式的优先级是最低的。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Java Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jsp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Item “xxx” is used by macOS and cannot be opened.</title>
      <link href="/2019/04/05/Item-%E2%80%9Cxxx%E2%80%9D-is-used-by-macOS-and-cannot-be-opened/"/>
      <url>/2019/04/05/Item-%E2%80%9Cxxx%E2%80%9D-is-used-by-macOS-and-cannot-be-opened/</url>
      
        <content type="html"><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>Item “xxx” is used by macOS and cannot be opened.</p><h4 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h4><p>macOS 默认挂载 ntfs 是只读的，当然，我们有办法使用命令行重新挂载它来变成可读写。不过这容易造成 ntfs 权限错误，结果就是插到另一台电脑上的时候，这个文件可能变成灰色。</p><a id="more"></a><p>使用   xcode-select –install 来安装命令行工具，安装完成后，我们可以使用下面的命令来查看这个文件的属性：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GetFileInfo a.zip  </span><br><span class="line">file: &quot;filename&quot;  </span><br><span class="line">type: &quot;brok&quot;</span><br><span class="line">creator: &quot;MACS&quot;</span><br><span class="line">attributes: avbstclinmedz</span><br><span class="line">created: 02/23/2019 20:16:52</span><br><span class="line">modified: 03/16/2019 09:48:28</span><br></pre></td></tr></table></figure></p><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><p><code>SetFile -c &quot;&quot; -t &quot;&quot; a.zip</code></p><h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h4><p><a href="https://www.logcg.com/archives/2977.html" target="_blank" rel="noopener">Mac OS X – Problems with file permission into NTFS usb drive</a></p>]]></content>
      
      
      <categories>
          
          <category> Mac系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Arraylist</title>
      <link href="/2019/04/03/Java-Arraylist/"/>
      <url>/2019/04/03/Java-Arraylist/</url>
      
        <content type="html"><![CDATA[<h4 id="Arraylist"><a href="#Arraylist" class="headerlink" title="Arraylist"></a>Arraylist</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p><code>public class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt; implements List&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable</code></p><p>其底层数据结构为数组，实现了  </p><ol><li>List<e>, </e></li><li>RandomAccess, </li><li>Cloneable, </li><li>java.io.Serializable  </li></ol><a id="more"></a><p>RandomAccess : 快速访问能力，以O(1)访问数组下标。</p><p>占据一块连续的内存空间，空间效率不高，内存连续，读写效率高。</p><h5 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 保存ArrayList中数据的数组</span><br><span class="line">private transient Object[] elementData;</span><br><span class="line">// ArrayList中实际数据的数量</span><br><span class="line">private int size;</span><br></pre></td></tr></table></figure><ol><li>elementData是个动态数组，我们能通过构造函数 ArrayList(int initialCapacity)来执行它的初始容量为initialCapacity；如果通过不含参数的构造函数ArrayList()来创建ArrayList，则elementData的容量默认是<strong>10</strong>。elementData数组的大小会根据ArrayList容量的增长而动态的增长，具体的增长方式，请参考源码分析中的ensureCapacity()函数。</li><li>size 则是动态数组的实际大小。</li></ol><h5 id="ArrayList扩容原理"><a href="#ArrayList扩容原理" class="headerlink" title="ArrayList扩容原理"></a>ArrayList扩容原理</h5><p>源码中指定ArrayList的默认初始大小为10的数组，长度为10的Object数组很容易就装满了，如果增加的元素个数超过了10个，那么ArrayList底层会新生成一个数组，长度为原来数组的1.5倍+1，然后将原数组的内容复制到新数组中，并且后续增加的内容都会放到新数组当中，当新数组无法容纳增加的元素时，重复该过程。下图可以看到ArrayList扩容过程</p><h4 id="ArrayList安全性"><a href="#ArrayList安全性" class="headerlink" title="ArrayList安全性"></a>ArrayList安全性</h4><p>因为ArrayList是线程不安全的，ArrayList的操作并非是原子性的，通读ArrayList代码并没有实现线程同步机制的加锁约束。ArrayList添加一个元素的时候，需要两个步骤：  </p><ol><li>Items[Size]的位置存放此元素。  </li><li>增大Size的值。<br>在单线程运行的情况，这两个步骤是顺序执行的，互相不会影响。但是如果有两个线程去操作。  </li><li>线程A在0的位置赋了一个值，然后停下来。  </li><li>B线程ArrayList 0的位置又赋了一个值。<br>其实是重复在一个位置赋值，然后回到A线程，执行Size增加，也就是ArrayList的大小增加了，原来Size是1，现在变成2，然后停下来继续执行线程B，又增加了一个空间位置，size大小就变成了3，结果就是0的位置有值，1和2的索引位置都没有值实际大小是3，跟想要的结果0和1赋不同的值，结果不对。</li></ol><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>借助 <strong>Collections.synchronizedList</strong>，可以把ArrayList转换为线程安全的List。</p><p>与此类似的，还有HashSet,LinkedList,HashMap等等非线程安全的类，都通过工具类Collections转换为线程安全的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; list2 = Collections.synchronizedList(list1);</span><br><span class="line">    &#125;</span><br><span class="line">       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>List&lt;Hero&gt; heros = (List&lt;Hero&gt;) Collections.synchronizedList(new LinkedList&lt;Hero&gt;());</code></p><h4 id="ArrayList和LinkedList的区别"><a href="#ArrayList和LinkedList的区别" class="headerlink" title="ArrayList和LinkedList的区别"></a>ArrayList和LinkedList的区别</h4><ul><li><ol><li>是否保证线程安全： ArrayList 和 LinkedList 都是不同步的，也就是不保证线程安全；</li></ol></li><li><ol start="2"><li>底层数据结构： <ul><li>Arraylist 底层使用的是Object数组；</li><li>LinkedList 底层使用的是双向链表数据结构（JDK1.6之前为循环链表，JDK1.7取消了循环。注意双向链表和双向循环链表的区别：）； 详细可阅读JDK1.7-LinkedList循环链表优化</li></ul></li></ol></li><li><ol start="3"><li>插入和删除是否受元素位置的影响： <ul><li>3.1 ArrayList 采用数组存储，所以插入和删除元素的时间复杂度受元素位置的影响。 比如：执行add(E e) 方法的时候， ArrayList 会默认在将指定的元素追加到此列表的末尾，这种情况时间复杂度就是O(1)。但是如果要在指定位置 i 插入和删除元素的话（add(int index, E element) ）时间复杂度就为 O(n-i)。因为在进行上述操作的时候集合中第 i 和第 i 个元素之后的(n-i)个元素都要执行向后位/向前移一位的操作。 </li><li>3.2 LinkedList 采用链表存储，所以插入，删除元素时间复杂度不受元素位置的影响，都是近似 O（1）而数组为近似 O（n）。</li></ul></li></ol></li><li><ol start="4"><li>是否支持快速随机访问： <ul><li>LinkedList 不支持高效的随机元素访问，</li><li>ArrayList 支持。快速随机访问就是通过元素的序号快速获取元素对象(对应于get(int index) 方法)。</li></ul></li></ol></li><li><ol start="5"><li>内存空间占用： <ul><li>ArrayList的空 间浪费主要体现在在list列表的结尾会预留一定的容量空间.</li><li>LinkedList的空间花费则体现在它的每一个元素都需要消耗比ArrayList更多的空间（因为要存放直接后继和直接前驱以及数据).</li></ul></li></ol></li></ul><p>####ArrayList和Vector的区别</p><ol><li>Vector和ArrayList几乎是完全相同的,唯一的区别在于Vector是同步类(synchronized)，属于强同步类。因此开销就比ArrayList要大，访问要慢。正常情况下,大多数的Java程序员使用ArrayList而不是Vector,因为同步完全可以由程序员自己来控制。</li><li>Vector每次扩容请求其大小的2倍空间，而ArrayList是1.5倍。</li><li>Vector还有一个子类Stack.</li></ol><h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h4><ol><li></li></ol><h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h4><p><a href="https://www.jianshu.com/p/2cd7be850540" target="_blank" rel="noopener">Java集合干货系列-（一）ArrayList源码解析</a><br><a href="https://www.jianshu.com/p/2c976be12c85" target="_blank" rel="noopener">Java集合中的ArrayList</a></p>]]></content>
      
      
      <categories>
          
          <category> Java系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux Command 速查</title>
      <link href="/2019/04/03/Linux-Command-%E9%80%9F%E6%9F%A5/"/>
      <url>/2019/04/03/Linux-Command-%E9%80%9F%E6%9F%A5/</url>
      
        <content type="html"><![CDATA[<h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">ls　　        显示文件或目录</span><br><span class="line"></span><br><span class="line">     -l           列出文件详细信息l(list)</span><br><span class="line"></span><br><span class="line">     -a          列出当前目录下所有文件及目录，包括隐藏的a(all)</span><br><span class="line"></span><br><span class="line">mkdir         创建目录</span><br><span class="line"></span><br><span class="line">     -p           创建目录，若无父目录，则创建p(parent)</span><br><span class="line"></span><br><span class="line">cd               切换目录</span><br><span class="line"></span><br><span class="line">touch          创建空文件</span><br><span class="line"></span><br><span class="line">echo            创建带有内容的文件。</span><br><span class="line"></span><br><span class="line">cat              查看文件内容</span><br><span class="line"></span><br><span class="line">cp                拷贝</span><br><span class="line"></span><br><span class="line">mv               移动或重命名</span><br><span class="line"></span><br><span class="line">rm               删除文件</span><br><span class="line"></span><br><span class="line">     -r            递归删除，可删除子目录及文件</span><br><span class="line"></span><br><span class="line">     -f            强制删除</span><br><span class="line"></span><br><span class="line">find              在文件系统中搜索某文件</span><br><span class="line"></span><br><span class="line">wc                统计文本中行数、字数、字符数</span><br><span class="line"></span><br><span class="line">grep             在文本文件中查找某个字符串</span><br><span class="line"></span><br><span class="line">rmdir           删除空目录</span><br><span class="line"></span><br><span class="line">tree             树形结构显示目录，需要安装tree包</span><br><span class="line"></span><br><span class="line">pwd              显示当前目录</span><br><span class="line"></span><br><span class="line">ln                  创建链接文件</span><br><span class="line"></span><br><span class="line">more、less  分页显示文本文件内容</span><br><span class="line"></span><br><span class="line">head、tail    显示文件头、尾内容</span><br></pre></td></tr></table></figure><h4 id="压缩命令"><a href="#压缩命令" class="headerlink" title="压缩命令"></a>压缩命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">bzip2：</span><br><span class="line"></span><br><span class="line">tar:                打包压缩</span><br><span class="line"></span><br><span class="line">     -c              归档文件</span><br><span class="line"></span><br><span class="line">     -x              压缩文件</span><br><span class="line"></span><br><span class="line">     -z              gzip压缩文件</span><br><span class="line"></span><br><span class="line">     -j              bzip2压缩文件</span><br><span class="line"></span><br><span class="line">     -v              显示压缩或解压缩过程 v(view)</span><br><span class="line"></span><br><span class="line">     -f              使用档名</span><br><span class="line"></span><br><span class="line">例：</span><br><span class="line"></span><br><span class="line">tar -cvf /home/abc.tar /home/abc              只打包，不压缩</span><br><span class="line"></span><br><span class="line">tar -zcvf /home/abc.tar.gz /home/abc        打包，并用gzip压缩</span><br><span class="line"></span><br><span class="line">tar -jcvf /home/abc.tar.bz2 /home/abc      打包，并用bzip2压缩</span><br><span class="line"></span><br><span class="line">当然，如果想解压缩，就直接替换上面的命令  tar -cvf  / tar -zcvf  / tar -jcvf 中的“</span><br></pre></td></tr></table></figure><h4 id="Vim使用"><a href="#Vim使用" class="headerlink" title="Vim使用"></a>Vim使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">vim三种模式：命令模式、插入模式、编辑模式。使用ESC或i或：来切换模式。</span><br><span class="line"></span><br><span class="line">命令模式下：</span><br><span class="line"></span><br><span class="line">:q                      退出</span><br><span class="line"></span><br><span class="line">:q!                     强制退出</span><br><span class="line"></span><br><span class="line">:wq                   保存并退出</span><br><span class="line"></span><br><span class="line">:set number     显示行号</span><br><span class="line"></span><br><span class="line">:set nonumber  隐藏行号</span><br><span class="line"></span><br><span class="line">/apache            在文档中查找apache 按n跳到下一个，shift+n上一个</span><br><span class="line"></span><br><span class="line">插入模式下：</span><br><span class="line"></span><br><span class="line">100 dd  删除100行</span><br><span class="line"></span><br><span class="line">10 yy  p 复制10行 p 粘贴</span><br><span class="line"></span><br><span class="line">h 左移一个字符</span><br><span class="line"></span><br><span class="line">k 上移一个字符</span><br><span class="line"></span><br><span class="line">j 下移一个字符</span><br><span class="line"></span><br><span class="line">w 向前移动一个单词（光标停在单词首部），如果已到行尾，则转至下一行行首。此命令快，可以代替l命令。</span><br><span class="line"></span><br><span class="line">b 向后移动一个单词 2b 向后移动2个单词</span><br><span class="line"></span><br><span class="line">e，同w，只不过是光标停在单词尾部</span><br><span class="line"></span><br><span class="line">ge，同b，光标停在单词尾部。</span><br><span class="line"></span><br><span class="line">gg 移动到文件头。 = [[</span><br><span class="line"></span><br><span class="line">G（shift + g） 移动到文件尾。 = ]]</span><br><span class="line"></span><br><span class="line">Ctrl + e 向下滚动一行</span><br><span class="line"></span><br><span class="line">Ctrl + y 向上滚动一行</span><br><span class="line"></span><br><span class="line">Ctrl + d 向下滚动半屏</span><br><span class="line"></span><br><span class="line">Ctrl + u 向上滚动半屏</span><br><span class="line"></span><br><span class="line">Ctrl + f 向下滚动一屏</span><br><span class="line"></span><br><span class="line">Ctrl + b 向上滚动一屏</span><br></pre></td></tr></table></figure><h4 id="用户及用户组管理"><a href="#用户及用户组管理" class="headerlink" title="用户及用户组管理"></a>用户及用户组管理</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">/etc/passwd    存储用户账号</span><br><span class="line"></span><br><span class="line">/etc/group       存储组账号</span><br><span class="line"></span><br><span class="line">/etc/shadow    存储用户账号的密码</span><br><span class="line"></span><br><span class="line">/etc/gshadow  存储用户组账号的密码</span><br><span class="line"></span><br><span class="line">useradd 用户名</span><br><span class="line"></span><br><span class="line">userdel 用户名</span><br><span class="line"></span><br><span class="line">adduser 用户名</span><br><span class="line"></span><br><span class="line">groupadd 组名</span><br><span class="line"></span><br><span class="line">groupdel 组名</span><br><span class="line"></span><br><span class="line">passwd root     给root设置密码</span><br><span class="line"></span><br><span class="line">su root</span><br><span class="line"></span><br><span class="line">su - root</span><br><span class="line"></span><br><span class="line">/etc/profile     系统环境变量</span><br><span class="line"></span><br><span class="line">bash_profile     用户环境变量</span><br><span class="line"></span><br><span class="line">.bashrc              用户环境变量</span><br><span class="line"></span><br><span class="line">su user              切换用户，加载配置文件.bashrc</span><br><span class="line"></span><br><span class="line">su - user            切换用户，加载配置文件/etc/profile ，加载bash_profile</span><br><span class="line"></span><br><span class="line">更改文件的用户及用户组</span><br><span class="line"></span><br><span class="line">sudo chown [-R] owner[:group] &#123;File|Directory&#125;</span><br><span class="line"></span><br><span class="line">例如：还以jdk-7u21-linux-i586.tar.gz为例。属于用户hadoop，组hadoop</span><br><span class="line"></span><br><span class="line">要想切换此文件所属的用户及组。可以使用命令。</span><br><span class="line"></span><br><span class="line">sudo chown root:root jdk-7u21-linux-i586.tar.gz</span><br></pre></td></tr></table></figure><h4 id="显示消耗内存最多的10个进程"><a href="#显示消耗内存最多的10个进程" class="headerlink" title="显示消耗内存最多的10个进程"></a>显示消耗内存最多的10个进程</h4><p><code>ps aux | sort -nk +4 | tail</code></p><h4 id="实时查看目录下最新改动过的文件"><a href="#实时查看目录下最新改动过的文件" class="headerlink" title="实时查看目录下最新改动过的文件"></a>实时查看目录下最新改动过的文件</h4><p><code>watch -d -n 1 &#39;df; ls -FlAt /path&#39;</code></p><h4 id="查看端口占用"><a href="#查看端口占用" class="headerlink" title="查看端口占用"></a>查看端口占用</h4><p><code>netstat -tulnp</code></p><h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h4><p><a href="https://www.jianshu.com/p/85866c388d76" target="_blank" rel="noopener">Linux　命令速查</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ERP缩写释义</title>
      <link href="/2019/04/03/ERP%E7%BC%A9%E5%86%99%E9%87%8A%E4%B9%89/"/>
      <url>/2019/04/03/ERP%E7%BC%A9%E5%86%99%E9%87%8A%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<h4 id="常用名词缩写"><a href="#常用名词缩写" class="headerlink" title="常用名词缩写"></a>常用名词缩写</h4><a id="more"></a><p>ATO = assemble to Order 按订单装配<br>PLM = Product Lifecycle Management<br>EDM = Engineering Data Mangement</p><p>ASCP = Advanced Supply Chain Planning<br>HLS = High Level Scheduler<br>SCO = Supply Chain Optimizer<br>MBP = Memory Based Planner</p><p>BOM =  Bill of Material 物料清单</p><p>ODS = Operational Data Store<br>ADS = Applications Data Store<br>PDS = Planning Data Store</p><p>MOS = My Oracle Support<br>TAR = Technical Assistance Request<br>SR = Support Request</p><p>ARU = Automated Release Updates<br>KPIs = Key Performance Indicators<br>APS = Advanced Planning Suite</p><p>WIP = work in process 半制品，在制品<br>ATO = assemble to Order 按订单装配<br>PTO = Pick to Order  按订单拣料</p><p>PO = purchasing Order 采购订单<br>purchasing document = 采购单据<br>ASL = Approved Supplier List</p><p>MDS = Master Demand Schedule 需求计划</p><p>PTF = Planning Time Fence 计划时界<br>ASN = Advanced Shipment Notices<br>ASBN = Advanced Shipment Billing Notices</p><p>The manufacturing and distribution plan types:<br>    MPP = Master Production Plans<br>    MPS = Master Production Schedules 主生产计划<br>    MRP = Material Requirements Plans 物料需求计划<br>    DRP = Distribution Plans</p><p>PIP = Planned Inventory Points 计划库存点<br>UOM = Unit of measure 测量单位</p><p>概念：</p><p>Value Engineering = 工程经济学，最经济管理法<br>Procure to Pay = 采购到付款</p><p>Blind Receipt = 盲接收（是指在“接收”窗口中不显示预计接收数量（数量全部为0），旨在要求接收人员清点接收行上的所有物料数量）<br>Cascade Receipt = 级联接收<br>Express Receipt = 快速接收<br>Substitute Receipt = 替代接收</p><p>on-hand Qty = 现有量<br>Receiving  Transaction = 交付<br>Assignment Set = 分配集</p><p>Purchase Order and Types：<br>    Blanket Purchase Agreement = BPA 一揽子采购协议是一种为降低采购成本,与供应商签订的中长期采购协议。一次签订,多次要货<br>    Contract Purchase Agreement 和约采购<br>    Planned Purchase Order<br>    Standard Purchase Order</p><p>business group: 企业集团<br>Set of books: [财]成套账簿<br>accounting entity： 会计<br>legal entity: 法人<br>Operating unit： 经营机构;操作单位<br>inventory organization： 库存组织<br>Subinventory： 子库存<br>Inventory transactions： 库存模块； 存货处理； 存货交易<br>Time Fence 时界; 时间栏; 时间栅栏<br>Header Information: 标题信息<br>line Information: 相关信息？链接资讯</p><p>Oracle Engineering BOM = 工程资料管理系统<br>Oracle Work in Process = 生管管理系统<br>Oracle Cost Management = 成本管理系统</p><p>ATP = Available to Promise（有存货才保证）： 指基于预定义的现有与计划供给情况对交货做出承诺的能力。<br>CTP = Capable to Promise（有生产能力才保证）： 指确定部件物料和资源的可用性以满足非计划需求的附加能力。<br>CTD = Capable to Deliver （有交货能力）：指考虑转移提前期 以满足客户交货的需要。</p><p>FOB = free on board 离岸价格； 船上交货； 离岸价； 目的地交货<br>Freight On Board (FOB)</p><p>Shipping: 运输<br>sales order: 销售定单</p><p>3 types of Sales Orders<br><strong>Standard (can only be used for ordering material)</strong>Mixed (Can be used for ordering material and also returning the material )<br>**Return (Can be used only for returning material)</p><p>ORACLE：</p><p>OBI = Oracle Base Image<br>OIM = Oracle Identify Management<br>MDM = Mobile Device Management<br>SSO = Single Sign On<br>OIM = Oracle Identity Management</p><p>RDBMS = Relational Database Management System<br>ERP = Enterprise Resource Planning 企业资源计划系统<br>CRM  = Customer Relationship Management<br>BIS = Business Intelligent system</p>]]></content>
      
      
      <categories>
          
          <category> Oracle Tools </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ADE Commands</title>
      <link href="/2019/04/03/ADE-Commands/"/>
      <url>/2019/04/03/ADE-Commands/</url>
      
        <content type="html"><![CDATA[<h4 id="常用的ADE-Commands"><a href="#常用的ADE-Commands" class="headerlink" title="常用的ADE Commands:"></a>常用的ADE Commands:</h4><a id="more"></a><pre><code>* cd $ADE_VIEW_NAME* cd $ADE_VIEW_ROOT* ade okinit* setenv ADE_SITE ade_fusion_slc* ade createview -series &lt;Series Name&gt; (-label &lt;label name&gt; or -latest) &lt;view name/workspace name on local&gt;    -------&gt; Create workspace and checkout* ade createview scm_orchinfra_view -series FUSIONAPPS_PT.INTSCMC_LINUX.X64 -latest * ade useview &lt;view name&gt;   -------&gt;Start using the view/workspace*     jdev &amp;  -------&gt;open Jdeveloper with the view created in step 2. we need to import the code manually.* ade begintrans &lt;bug number&gt; -no_restore -------&gt;/ create trans file on the view. It will take time so we will start jdev.* ade ci &lt;filename&gt;* ade ci -all or ade ciall -------&gt;to checkin all files* * ade begintrans ranathi_scmc_trnx -------&gt; Begins transaction* ade savetrans &lt;trans_name&gt; -------&gt;/ after this others can view the trans file.* ade describetrans &lt;trans_name&gt; -------&gt; it will tell how many files we changed .* ade renametrans -bug &lt;bug number&gt;   ------&gt; change bug number* ade destroytrans -force &lt;trans_name&gt; -------&gt;local changes will be destroyed and trans file will be deleted.* ade tkreview &lt;trans_name&gt; -------&gt;To see a particular transaction for changes* ade tkreview -view  -------&gt;To see a particular transaction along with the file that are not checked-in.* ade tkvtree &lt;file&gt;* ade lsco* ade unco &lt;filename&gt;  / ade unco -all -------&gt;the changes will be unbranched  from trans file, but changes will be still there on our local. To branch again change the file again and it will be associated to transaction.* ade fetchtrans(get saved trans) /grabtrans(get ci transactions) &lt;trans_name&gt; -------&gt; to merge other person trans file to our local.* ade grabtrans &lt;trans_name&gt;* ade sharetrans &lt;trans_name&gt;ade unbranch &lt;fullpath&gt;    ------&gt; rollback the checkin, or cancel the checked in files from txn* ade showseries | grep SCMC  -------&gt; Shows all serires* ade lsviews -------&gt; To view all our views*     vncconfig &amp;  -------&gt; To copy from windows to VM* ade lshistory &lt;filename&gt; |grep Merges  ------&gt; To get History of file* ade showlabels -series FUSIONAPPS_11.1.1.5.1_LINUX.X64 ------&gt;  Shows all labels in a series* ade exec /usr/local/nde/ade/util/adhoc_query_scripts/list_merges_to_branch.pl -p FUSIONAPPS -b st_fusionapps_11.1.1.5.1 -d 30 -sort_by  // Get transactions of past 30 days* ade mkelem &lt;file-name&gt; ----&gt; To add file to branch* ade rm &lt;file-name&gt;* ade pwv          ------&gt; Display info for the named view; defaults to the current view* ade pwd          ------&gt; displays view-relative path, otherwise displays absolute path.* ade destroyview &lt;view name&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Oracle Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title> Java 集合 - Collection</title>
      <link href="/2019/04/02/Java-%E5%AE%B9%E5%99%A8/"/>
      <url>/2019/04/02/Java-%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p><img src="/2019/04/02/Java-容器/collections.png" alt><br><img src="/2019/04/02/Java-容器/coll_mindmap.png" alt></p><table align="center"><br><tr><td colspan="2" rowspan="2" align="center" border="0"></td><th colspan="5" align="center">Implementations</th></tr><tr><th>Hash Table</th><th>Resizable Array</th><th>Balanced Tree</th><th>Linked List</th><th>Hash Table + Linked List</th></tr><tr><th rowspan="4">Interfaces</th><th>Set</th><td><tt>HashSet</tt></td><td></td><td><tt>TreeSet</tt></td><td></td><td><tt>LinkedHashSet</tt></td></tr><tr><th>List</th><td></td><td><tt>ArrayList</tt></td><td></td><td><tt>LinkedList</tt></td><td></td></tr><tr><th>Deque</th><td></td><td><tt>ArrayDeque</tt></td><td></td><td><tt>LinkedList</tt></td><td></td></tr><tr><th>Map</th><td><tt>HashMap</tt></td><td></td><td><tt>TreeMap</tt></td><td></td><td><tt>LinkedHashMap</tt></td></tr></table><h3 id="1-容器类接口和抽象容器类"><a href="#1-容器类接口和抽象容器类" class="headerlink" title="1.容器类接口和抽象容器类"></a>1.容器类接口和抽象容器类</h3><h4 id="1-1-说明"><a href="#1-1-说明" class="headerlink" title="1.1 说明"></a>1.1 说明</h4><p>　　容器接口是容器的基础。使用接口可以将容器的实现与容器接口分开，因而可以使用相同的方法访问容器而不需关心容器具体的数据结构。</p><p>　　同理，Iterator接口也使用户能够使用相同的方法访问不同的容器类。</p><h4 id="1-2-容器接口（Collection，Map，Iterator）"><a href="#1-2-容器接口（Collection，Map，Iterator）" class="headerlink" title="1.2 容器接口（Collection，Map，Iterator）"></a>1.2 容器接口（Collection，Map，Iterator）</h4><h5 id="1）collection接口"><a href="#1）collection接口" class="headerlink" title="1）collection接口"></a>1）collection接口</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">* boolean add(Object obj): 添加对象，集合发生变化则返回true</span><br><span class="line">* Iterator iterator()：返回Iterator接口的对象</span><br><span class="line">* int size()</span><br><span class="line">* boolean isEmpty()</span><br><span class="line">* boolean contains(Object obj)</span><br><span class="line">* void clear()</span><br><span class="line">* &lt;T&gt; T[] toArray(T[] a)</span><br></pre></td></tr></table></figure><h5 id="2）Map接口（存放键值对，Map中的值也可以是一个容器）"><a href="#2）Map接口（存放键值对，Map中的值也可以是一个容器）" class="headerlink" title="2）Map接口（存放键值对，Map中的值也可以是一个容器）"></a>2）Map接口（存放键值对，Map中的值也可以是一个容器）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">* Object get（Object key）</span><br><span class="line">* Object put（Object key, Object value）</span><br><span class="line">* Set keySet() : returns the keys set      Set&lt;K&gt; keySet()</span><br><span class="line">* Set entrySet(): returns mappings set    Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</span><br><span class="line">* containsKey()</span><br><span class="line">* containsValue()</span><br></pre></td></tr></table></figure><h5 id="3）Iterator接口"><a href="#3）Iterator接口" class="headerlink" title="3）Iterator接口"></a>3）Iterator接口</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* Object next()</span><br><span class="line">* boolean hasNext()</span><br><span class="line">* void remove()</span><br></pre></td></tr></table></figure><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>1.使用抽象编程思想，创建时使用父类引用指向子类对象，返回时返回抽象接口</p><p>2.如果涉及到堆栈，队列等操作，应该考虑用List，对于需要快速插入，删除元素，应该使用LinkedList，如果需要快速随机访问元素，应该使用ArrayList。</p><p>3.如果程序在单线程环境中使用非同步的类，其效率较高</p><p>4.可以使用Collections 工具类中 unmodifiableList/unmodifiableMap/unmodifiableSet/unmodifiableSortedMap/unmodifiableSortedSet 等创建不能修改的List,Map,List等</p><p>5.可以使用Collections工具类中Collections.synchronizedList(new ArrayList())等实现同步</p><p>6.可以使用Arrays.equal()判断两个数组是否相等</p>]]></content>
      
      
      <categories>
          
          <category> Java系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title> Java Transient 关键字</title>
      <link href="/2019/04/02/Java-Transient-%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>/2019/04/02/Java-Transient-%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h3 id="1-transient的作用及使用方法"><a href="#1-transient的作用及使用方法" class="headerlink" title="1. transient的作用及使用方法"></a>1. transient的作用及使用方法</h3><p>一个对象只要实现了Serilizable接口，这个对象就可以被序列化.<br>只要这个类实现了Serilizable接口，这个类的所有属性和方法都会自动序列化。</p><a id="more"></a><p>类的有些属性需要序列化，而其他属性不需要被序列化，为了安全起见，不希望在网络操作（主要涉及到序列化操作，本地序列化缓存也适用）中被传输，这些信息对应的变量就可以加上transient关键字。换句话说，这个字段的生命周期仅存于调用者的内存中而不会写到磁盘里持久化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8294180014912103005L</span>;  </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> String passwd;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(<span class="string">"test"</span>);</span><br><span class="line">        user.setPasswd(<span class="string">"123456"</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"Before Serializable: "</span>);</span><br><span class="line">        System.out.println(<span class="string">"username: "</span> + user.getUsername());</span><br><span class="line">        System.err.println(<span class="string">"password: "</span> + user.getPasswd());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ObjectOutputStream os = <span class="keyword">new</span> ObjectOutputStream(</span><br><span class="line">                    <span class="keyword">new</span> FileOutputStream(<span class="string">"C:/user.txt"</span>));</span><br><span class="line">            os.writeObject(user); <span class="comment">// 将User对象写进文件</span></span><br><span class="line">            os.flush();</span><br><span class="line">            os.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ObjectInputStream is = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(</span><br><span class="line">                    <span class="string">"C:/user.txt"</span>));</span><br><span class="line">            user = (User) is.readObject(); <span class="comment">// 从流中读取User的数据</span></span><br><span class="line">            is.close();</span><br><span class="line">            </span><br><span class="line">            System.out.println(<span class="string">"After Serializable: "</span>);</span><br><span class="line">            System.out.println(<span class="string">"username: "</span> + user.getUsername());</span><br><span class="line">            System.err.println(<span class="string">"password: "</span> + user.getPasswd());</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>Outout:  </p><p>Before Serializable:<br>username: test<br>password: 123456</p><p>After Serializable:<br>username: test<br>password: null</p><h3 id="2-transient使用"><a href="#2-transient使用" class="headerlink" title="2. transient使用"></a>2. transient使用</h3><ol><li>一旦变量被transient修饰，变量将不再是对象持久化的一部分，该变量内容在序列化后无法获得访问。</li><li>transient关键字只能修饰变量，而不能修饰方法和类。注意，本地变量是不能被transient关键字修饰的。变量如果是用户自定义类变量，则该类需要实现Serializable接口。</li><li><font color="red">被transient关键字修饰的变量不再能被序列化，一个静态变量不管是否被transient修饰，均不能被序列化。</font></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title> Java Final 关键字</title>
      <link href="/2019/04/02/Java-Final-%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>/2019/04/02/Java-Final-%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<p>应用于：</p><ol><li>变量</li><li>方法</li><li>类</li></ol><a id="more"></a><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>Final 声明的叫做final变量。经常和static一起使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOAN = ‘loan’;</span><br></pre></td></tr></table></figure><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>方法加上final关键字，表明不可以被子类重写。<br>———— 如果一个方法非常完善，不需要改变，声明为final。<br>final方法比非final方法快<br>———— 因为编译的时候已经静态绑定了，不需要再运行时动态绑定。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"cheap personal loan"</span>; <span class="comment">//compilation error: overridden method is final</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>final类是完整的，不能被继承<br>——— String类，Integer类 以及其他包装类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonalLoan</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">CheapPersonalLoan</span> <span class="keyword">extends</span> <span class="title">PersonalLoan</span></span>&#123;  <span class="comment">//compilation error: cannot inherit from final class</span></span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><ol><li>提高性能 ——— JVM 和 java 应用会缓存很多final变量</li><li>多线程共享，不需要额外开销。</li><li>JVM对方法、变量进行优化。</li></ol><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips:"></a>Tips:</h3><ol><li>final成员变量必须在声明的时候初始化或者在构造器中初始化，否则就会报编译错误。</li><li>在匿名类中所有变量都必须是final变量。</li><li>final关键字不同于finally关键字，后者用于异常处理。</li><li>final关键字容易与finalize()方法搞混，后者是在Object类中定义的方法，是在垃圾回收之前被JVM调用的方法。</li><li>接口中声明的所有变量本身是final的。</li><li>final和abstract这两个关键字是反相关的，final类就不可能是abstract的。</li><li>final方法在编译阶段绑定，称为静态绑定(static binding)。</li><li>对于集合对象声明为final指的是引用不能被更改，但是你可以向其中增加，删除或者改变内容。譬如：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> List Loans = <span class="keyword">new</span> ArrayList();</span><br><span class="line">list.add(“home loan”);  <span class="comment">//valid</span></span><br><span class="line">list.add(<span class="string">"personal loan"</span>); <span class="comment">//valid</span></span><br><span class="line">loans = <span class="keyword">new</span> Vector();  <span class="comment">//not valid</span></span><br></pre></td></tr></table></figure><h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><ol><li>Java在运行的时候保存了一个String pool，只有是不可变的，这个pool才有可能实现。</li><li>安全问题，密码，数据库用户名，以字符串获得连接。</li><li>多线程安全，同一个字符串实例可以被多个线程共享。</li><li>类加载器用字符串，也是为了安全性。</li><li>Hashmap中使用字符串，速度快。</li></ol><h3 id="创建一个不可变类"><a href="#创建一个不可变类" class="headerlink" title="创建一个不可变类"></a>创建一个不可变类</h3><ul><li>将类声明为final，所以它不能被继承</li><li>将所有的成员声明为私有的，这样就不允许直接访问这些成员</li><li>对变量不要提供setter方法</li><li>将所有可变的成员声明为final，这样只能对它们赋值一次</li><li>通过构造器初始化所有成员，进行深拷贝(deep copy)</li><li>在getter方法中，不要直接返回对象本身，而是克隆对象，并返回对象的拷贝</li></ul><h3 id="Related-Links"><a href="#Related-Links" class="headerlink" title="Related Links"></a>Related Links</h3><p><a href="http://www.importnew.com/7860.html%20%0A" target="_blank" rel="noopener">如何使用建造者模式(Builder Pattern)创建不可变类</a><br><a href="https://www.jianshu.com/p/f68d6ef2dcf0" target="_blank" rel="noopener">Final of Java，这一篇差不多了</a></p>]]></content>
      
      
      <categories>
          
          <category> Java系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title> Java Static 关键字</title>
      <link href="/2019/04/02/Java-Static-%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>/2019/04/02/Java-Static-%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h4 id="变量和方法"><a href="#变量和方法" class="headerlink" title="变量和方法"></a>变量和方法</h4><p>静态变量，被队友对象共享，内存中只有一个副本，仅仅在类加载的时候被初始化。<br>是属于这个类的，不属于某个变量，被类中所有变量共享.  </p><p><font color="red">如果方法执行的操作不依赖于其类的各个变量和方法，请将其设置为静态（这将使程序的占用空间更小）。 否则，它应该是非静态的。</font><br>静态方法在类加载的时候就存在了，它不依赖于任何实例，所以静态方法必须有实现，也就是说它不能是抽象方法（abstract）。</p><a id="more"></a><h4 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h4><p>静态语句块在类初始化时运行一次。</p><h4 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h4><p>内部类的一种，静态内部类不依赖外部类，且不能访问外部类的非静态的变量和方法。延迟初始化，线程安全。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    声明为 <span class="keyword">private</span> 避免调用默认构造方法创建对象</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    声明为 <span class="keyword">private</span> 表明静态内部该类只能在该 Singleton 类中被访问</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getUniqueInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当 Singleton 类加载时，静态内部类 SingletonHolder 没有被加载进内存。只有当调用 getUniqueInstance() 方法从而触发 SingletonHolder.INSTANCE 时 SingletonHolder 才会被加载，此时初始化 INSTANCE 实例，并且 JVM 能确保 INSTANCE 只被实例化一次。</p><h4 id="静态代码块和非静态代码块"><a href="#静态代码块和非静态代码块" class="headerlink" title="静态代码块和非静态代码块"></a>静态代码块和非静态代码块</h4><p>相同点：都是在JVM加载类时且在构造方法执行之前执行，在类中都可以定义多个，定义多个时按定义的顺序执行，一般在代码块中对一些static变量进行赋值。<br>不同点： 静态代码块在非静态代码块之前执行(静态代码块—非静态代码块—构造方法)。静态代码块只在第一次new执行一次，之后不再执行，而非静态代码块在每new一次就执行一次。 非静态代码块可在普通方法中定义(不过作用不大)；而静态代码块不行。</p>]]></content>
      
      
      <categories>
          
          <category> Java系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 深拷贝与浅拷贝</title>
      <link href="/2019/04/02/Java-%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
      <url>/2019/04/02/Java-%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>浅拷贝和深拷贝都是针对一个已有对象的操作。 在 Java 中，除了基本数据类型（元类型）之外，还存在 类的实例对象 这个引用数据类型。而一般使用 『 = 』号做赋值操作的时候。对于基本数据类型，实际上是拷贝的它的值，但是对于对象而言，其实赋值的只是这个对象的引用，将原对象的引用传递过去，他们实际上还是指向的同一个对象。</p><a id="more"></a><p>而浅拷贝和深拷贝就是在这个基础之上做的区分，如果在拷贝这个对象的时候，只对基本数据类型进行了拷贝，而对引用数据类型只是进行了引用的传递，而没有真实的创建一个新的对象，则认为是浅拷贝。反之，在对引用数据类型进行拷贝的时候，创建了一个新的对象，并且复制其内的成员变量，则认为是深拷贝。</p><p>所谓的浅拷贝和深拷贝，只是在拷贝对象的时候，对<strong>类的实例对象</strong>这种引用数据类型的不同操作而已。</p><ul><li>浅拷贝：对基本数据类型进行值传递，对引用数据类型进行引用传递般的拷贝，此为浅拷贝。</li><li>深拷贝：对基本数据类型进行值传递，对引用数据类型，创建一个新的对象，并复制其内容，此为深拷贝。</li></ul><h3 id="java-clone-方法"><a href="#java-clone-方法" class="headerlink" title="java clone()方法"></a>java clone()方法</h3><h4 id="Object-上的-clone-方法"><a href="#Object-上的-clone-方法" class="headerlink" title="Object 上的 clone() 方法"></a>Object 上的 clone() 方法</h4><p>在 Java 中，所有的 Class 都继承自 Object ，而在 Object 上，存在一个 clone() 方法，它被声明为了 <font color="red"> protected </font> ，所以我们可以在其子类中使用它。<br>而无论是浅拷贝还是深拷贝，都需要实现 clone() 方法，来完成操作。</p><h4 id="clone-规则"><a href="#clone-规则" class="headerlink" title="clone 规则"></a>clone 规则</h4><ol><li>基本类型<br> 如果变量是基本类型，则拷贝其值，比如int、float等。</li><li>对象<br> 如果变量是一个实例对象，则拷贝其地址引用，也就是说新对象和原来对象是共用实例变量的。</li><li>String字符串<br> 若变量为String字符串，则拷贝其地址引用。但是在修改时，它会从字符串池中重新生成一个新的字符串，原有的对象保持不变。</li></ol><h4 id="clone-步骤"><a href="#clone-步骤" class="headerlink" title="clone 步骤"></a>clone 步骤</h4><ol><li>实现Cloneable接口 </li><li>重载Object类中的clone()方法，重载时需定义为public </li><li>在重载方法中，调用super.clone()</li></ol><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><p>首先创建一个 class 为 FatherClass ，对其实现 Cloneable 接口，并且重写 clone() 方法。<br>、<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">father</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> child son;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        father father = (father)<span class="keyword">super</span>.clone();</span><br><span class="line">        <span class="comment">//这里注释掉就是浅克隆，否则就是深克隆</span></span><br><span class="line">        father.son = (child)son.clone();</span><br><span class="line">        <span class="keyword">return</span> father;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">child</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (child)<span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><ol><li>序列化（serialization）这个对象，再反序列化回来，就可以得到这个新的对象，无非就是序列化的规则需要我们自己来写。</li><li>继续利用 clone() 方法，既然 clone() 方法，是我们来重写的，实际上我们可以对其内的引用类型的变量，再进行一次 clone()。</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>实则浅拷贝和深拷贝只是相对的，如果一个对象内部只有基本数据类型，那用 clone() 方法获取到的就是这个对象的深拷贝，而如果其内部还有引用数据类型，那用 clone() 方法就是一次浅拷贝的操作。</p>]]></content>
      
      
      <categories>
          
          <category> Java系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JsonUtils</title>
      <link href="/2019/04/02/JsonUtils/"/>
      <url>/2019/04/02/JsonUtils/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>项目中经常会有String转Object以及Object转Json字符串的需求，故封装一个常用Json工具类</p><a id="more"></a><h4 id="Maven依赖"><a href="#Maven依赖" class="headerlink" title="Maven依赖"></a>Maven依赖</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.codehaus.jackson&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;jackson-mapper-asl&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.9.13&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="jar包下载"><a href="#jar包下载" class="headerlink" title="jar包下载"></a>jar包下载</h4><p><a href="http://central.maven.org/maven2/org/codehaus/jackson/jackson-mapper-asl/1.9.13/jackson-mapper-asl-1.9.13.jar" target="_blank" rel="noopener">Jar包下载地址</a></p><h4 id="工具类代码"><a href="#工具类代码" class="headerlink" title="工具类代码"></a>工具类代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.codehaus.jackson.map.DeserializationConfig;</span><br><span class="line"><span class="keyword">import</span> org.codehaus.jackson.map.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.codehaus.jackson.map.SerializationConfig;</span><br><span class="line"><span class="keyword">import</span> org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion;</span><br><span class="line"><span class="keyword">import</span> org.codehaus.jackson.type.JavaType;</span><br><span class="line"><span class="keyword">import</span> org.codehaus.jackson.type.TypeReference;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Jackson工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> suddev</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2017-11-25 2:18 PM</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonUtil1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 对象字段全部列入</span></span><br><span class="line">        objectMapper.setSerializationInclusion(Inclusion.NON_DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 取消默认转换timestamps形式</span></span><br><span class="line">        objectMapper.configure(SerializationConfig.Feature.WRITE_DATES_AS_TIMESTAMPS,<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 忽略空bean转json的错误</span></span><br><span class="line">        objectMapper.configure(SerializationConfig.Feature.FAIL_ON_EMPTY_BEANS,<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 统一日期格式yyyy-MM-dd HH:mm:ss</span></span><br><span class="line">        objectMapper.setDateFormat(<span class="keyword">new</span> SimpleDateFormat(DateTimeUtil.STANDARD_FORMAT));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 忽略在json字符串中存在,但是在java对象中不存在对应属性的情况</span></span><br><span class="line">        objectMapper.configure(DeserializationConfig.Feature.FAIL_ON_UNKNOWN_PROPERTIES,<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Object转json字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">String <span class="title">obj2String</span><span class="params">(T obj)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> obj <span class="keyword">instanceof</span> String ? (String) obj : objectMapper.writeValueAsString(obj);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Parse object to String error"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Object转json字符串并格式化美化</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">String <span class="title">obj2StringPretty</span><span class="params">(T obj)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> obj <span class="keyword">instanceof</span> String ? (String) obj : objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(obj);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Parse object to String error"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * string转object</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str json字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz 被转对象class</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">string2Obj</span><span class="params">(String str,Class&lt;T&gt; clazz)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(str) || clazz == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> clazz.equals(String.class)? (T) str :objectMapper.readValue(str,clazz);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Parse String to Object error"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * string转object</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str json字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> typeReference 被转对象引用类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">string2Obj</span><span class="params">(String str, TypeReference&lt;T&gt; typeReference)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(str) || typeReference == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (T)(typeReference.getType().equals(String.class)? str :objectMapper.readValue(str,typeReference));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Parse String to Object error"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * string转object 用于转为集合对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str json字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> collectionClass 被转集合class</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> elementClasses 被转集合中对象类型class</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">string2Obj</span><span class="params">(String str,Class&lt;?&gt; collectionClass,Class&lt;?&gt;... elementClasses)</span></span>&#123;</span><br><span class="line">        JavaType javaType = objectMapper.getTypeFactory().constructParametricType(collectionClass,elementClasses);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> objectMapper.readValue(str,javaType);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Parse String to Object error"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MD5Utils</title>
      <link href="/2019/04/02/MD5Utils/"/>
      <url>/2019/04/02/MD5Utils/</url>
      
        <content type="html"><![CDATA[<h2 id="MD5工具类"><a href="#MD5工具类" class="headerlink" title="MD5工具类"></a>MD5工具类</h2><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>MD5(Message Digest Algorithm)加密算法是不对称的加密算法，因为其实不可逆的，实际上其不能算作加密算法，因为其不可解密。其实现原理是基于Hash算法(简称散列函数)。</p><a id="more"></a><h4 id="MD5算法特点"><a href="#MD5算法特点" class="headerlink" title="MD5算法特点"></a>MD5算法特点</h4><p>1、压缩性:任意长度的数据，算出的MD5值长度都是固定的。<br>2、容易计算:从原数据计算出MD5值很容易(算法简单)<br>3、抗修改性:对原数据进行任何改动，哪怕只修改1个字节，所得到的MD5值都有很大区别。<br>4、强抗碰撞:已知原数据和其MD5值，想找到一个具有相同MD5值的数据（即伪造数据）是非常困难的。<br>5、不可逆计算反推</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Md5Utils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用md5的算法进行加密</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">md5</span><span class="params">(String plainText)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] secretBytes = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            secretBytes = MessageDigest.getInstance(<span class="string">"md5"</span>).digest(</span><br><span class="line"></span><br><span class="line">                    plainText.getBytes());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"没有md5这个算法！"</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        String md5code = <span class="keyword">new</span> BigInteger(<span class="number">1</span>, secretBytes).toString(<span class="number">16</span>);<span class="comment">// 16进制数字</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果生成数字未满32位，需要前面补0</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span> - md5code.length(); i++) &#123;</span><br><span class="line"></span><br><span class="line">            md5code = <span class="string">"0"</span> + md5code;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> md5code;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 类排序（泛型集合排序）</title>
      <link href="/2019/04/01/Java%E7%B1%BB%E6%8E%92%E5%BA%8F%EF%BC%88%E6%B3%9B%E5%9E%8B%E9%9B%86%E5%90%88%E6%8E%92%E5%BA%8F%EF%BC%89/"/>
      <url>/2019/04/01/Java%E7%B1%BB%E6%8E%92%E5%BA%8F%EF%BC%88%E6%B3%9B%E5%9E%8B%E9%9B%86%E5%90%88%E6%8E%92%E5%BA%8F%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="Java-类排序（泛型集合排序）"><a href="#Java-类排序（泛型集合排序）" class="headerlink" title="Java 类排序（泛型集合排序）"></a>Java 类排序（泛型集合排序）</h2><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span>&#123;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">private</span> java.lang.Integer userId;</span><br><span class="line"> <span class="keyword">private</span> java.lang.String username;</span><br><span class="line"> <span class="keyword">private</span> java.util.Date birthDate;    </span><br><span class="line"> <span class="keyword">private</span> java.lang.Integer age;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> SimpleDateFormat formater = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">UserInfo</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">UserInfo</span><span class="params">(java.lang.Integer userId, java.lang.String username, java.util.Date birthDate, java.lang.Integer age)</span></span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.userId = userId;</span><br><span class="line">     <span class="keyword">this</span>.username = username;</span><br><span class="line">     <span class="keyword">this</span>.birthDate = birthDate;</span><br><span class="line">     <span class="keyword">this</span>.age = age;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserId</span><span class="params">(java.lang.Integer value)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.userId = value;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">public</span> java.lang.<span class="function">Integer <span class="title">getUserId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">this</span>.userId;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(java.lang.String value)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.username = value;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">public</span> java.lang.<span class="function">String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">this</span>.username;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthDate</span><span class="params">(java.util.Date value)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.birthDate = value;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">public</span> java.util.<span class="function">Date <span class="title">getBirthDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">this</span>.birthDate;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthDatestr</span><span class="params">(String value)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">     setBirthDate(formater.parse(value));</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">public</span> java.lang.<span class="function">String <span class="title">getBirthDatestr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> formater.format(getBirthDate());</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(java.lang.Integer value)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.age = value;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">public</span> java.lang.<span class="function">Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> StringBuffer().append(getUserId()).append(<span class="string">"; "</span>+getUsername()).append(<span class="string">"; "</span>+getBirthDatestr()).append(<span class="string">"; "</span>+getAge()).toString();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Collections.sort(list, <span class="keyword">new</span> Comparator() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object a, Object b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> one = ((Order)a).getUserId ();</span><br><span class="line"><span class="keyword">int</span> two = ((Order)b).getUserId (); </span><br><span class="line"><span class="keyword">return</span> one- two ; </span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 通用排序</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SortList</span>&lt;<span class="title">E</span>&gt;</span>&#123;    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Sort</span><span class="params">(List&lt;E&gt; list, <span class="keyword">final</span> String method, <span class="keyword">final</span> String sort)</span></span>&#123; </span><br><span class="line">Collections.sort(list, <span class="keyword">new</span> Comparator() &#123;            </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object a, Object b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    Method m1 = ((E)a).getClass().getMethod(method, <span class="keyword">null</span>);</span><br><span class="line">    Method m2 = ((E)b).getClass().getMethod(method, <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">if</span>(sort != <span class="keyword">null</span> &amp;&amp; <span class="string">"desc"</span>.equals(sort))<span class="comment">//倒序</span></span><br><span class="line">        ret = m2.invoke(((E)b), <span class="keyword">null</span>).toString().compareTo(m1.invoke(((E)a), <span class="keyword">null</span>).toString());    </span><br><span class="line"><span class="keyword">else</span><span class="comment">//正序</span></span><br><span class="line">        ret = m1.invoke(((E)a), <span class="keyword">null</span>).toString().compareTo(m2.invoke(((E)b), <span class="keyword">null</span>).toString());</span><br><span class="line">    &#125;<span class="keyword">catch</span>(NoSuchMethodException ne)&#123;</span><br><span class="line">        System.out.println(ne);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(IllegalAccessException ie)&#123;</span><br><span class="line">        System.out.println(ie);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(InvocationTargetException it)&#123;</span><br><span class="line">        System.out.println(it);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        List&lt;UserInfo&gt; list = <span class="keyword">new</span> ArrayList&lt;UserInfo&gt;();</span><br><span class="line"></span><br><span class="line">        SimpleDateFormat formater = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line"></span><br><span class="line">        list.add(<span class="keyword">new</span> UserInfo(<span class="number">3</span>,<span class="string">"b"</span>,formater.parse(<span class="string">"1980-12-01"</span>),<span class="number">11</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> UserInfo(<span class="number">1</span>,<span class="string">"c"</span>,formater.parse(<span class="string">"1980-10-01"</span>),<span class="number">30</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> UserInfo(<span class="number">2</span>,<span class="string">"a"</span>,formater.parse(<span class="string">"1973-10-01"</span>),<span class="number">11</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"-------原来序列-------------------"</span>);</span><br><span class="line"><span class="keyword">for</span>(UserInfo user : list)&#123;</span><br><span class="line">            System.out.println(user.toString());</span><br><span class="line">        &#125;        </span><br><span class="line"></span><br><span class="line"><span class="comment">//调用排序通用类</span></span><br><span class="line">        SortList&lt;UserInfo&gt; sortList = <span class="keyword">new</span> SortList&lt;UserInfo&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//按userId排序</span></span><br><span class="line">        sortList.Sort(list, <span class="string">"getUserId"</span>, <span class="string">"desc"</span>);</span><br><span class="line">        System.out.println(<span class="string">"--------按userId倒序------------------"</span>);</span><br><span class="line"><span class="keyword">for</span>(UserInfo user : list)&#123;</span><br><span class="line">            System.out.println(user.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//按username排序</span></span><br><span class="line">        sortList.Sort(list, <span class="string">"getUsername"</span>, <span class="keyword">null</span>);</span><br><span class="line">        System.out.println(<span class="string">"---------按username排序-----------------"</span>);        </span><br><span class="line"><span class="keyword">for</span>(UserInfo user : list)&#123;</span><br><span class="line">            System.out.println(user.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//按birthDate排序</span></span><br><span class="line">        sortList.Sort(list, <span class="string">"getBirthDatestr"</span>, <span class="keyword">null</span>);</span><br><span class="line">        System.out.println(<span class="string">"---------按birthDate排序-----------------"</span>);        </span><br><span class="line"><span class="keyword">for</span>(UserInfo user : list)&#123;</span><br><span class="line">            System.out.println(user.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 泛型</title>
      <link href="/2019/04/01/%E6%B3%9B%E5%9E%8B/"/>
      <url>/2019/04/01/%E6%B3%9B%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="通俗解释"><a href="#通俗解释" class="headerlink" title="通俗解释"></a>通俗解释</h3><p>　　通俗的讲，泛型就是操作类型的 占位符，即：假设占位符为 T，那么此次声明的数据结构操作的数据类型为T类型。<br>　　<br>　　<a id="more"></a></p><p>　　假定我们有这样一个需求：写一个排序方法，能够对整型数组、字符串数组甚至其他任何类型的数组进行排序，该如何实现？答案是可以使用 <strong>Java 泛型</strong>。</p><p>　　使用 Java 泛型的概念，我们可以写一个泛型方法来对一个对象数组排序。然后，调用该泛型方法来对整型数组、浮点数数组、字符串数组等进行排序。</p><h3 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h3><p>　　你可以写一个泛型方法，该方法在调用时可以接收不同类型的参数。根据传递给泛型方法的参数类型，编译器适当地处理每一个方法调用。</p><p>下面是定义泛型方法的规则：</p><ul><li>所有泛型方法声明都有一个类型参数声明部分（由尖括号分隔），该类型参数声明部分在方法返回类型之前（在下面例子中的 \<e>）。</e></li><li>每一个类型参数声明部分包含一个或多个类型参数，参数间用逗号隔开。一个泛型参数，也被称为一个类型变量，是用于指定一个泛型类型名称的标识符。</li><li>类型参数能被用来声明返回值类型，并且能作为泛型方法得到的实际参数类型的占位符。</li><li>泛型方法体的声明和其他方法一样。注意类型参数 <strong>只能代表引用型类型，不能是原始类型</strong> （像 int,double,char 的等）。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericMethodTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="comment">// 泛型方法 printArray                         </span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> &lt; E &gt; <span class="function"><span class="keyword">void</span> <span class="title">printArray</span><span class="params">( E[] inputArray )</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="comment">// 输出数组元素            </span></span><br><span class="line">         <span class="keyword">for</span> ( E element : inputArray )&#123;        </span><br><span class="line">            System.out.printf( <span class="string">"%s "</span>, element );</span><br><span class="line">         &#125;</span><br><span class="line">         System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String args[] )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 创建不同类型数组： Integer, Double 和 Character</span></span><br><span class="line">        Integer[] intArray = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line">        Double[] doubleArray = &#123; <span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>, <span class="number">4.4</span> &#125;;</span><br><span class="line">        Character[] charArray = &#123; <span class="string">'H'</span>, <span class="string">'E'</span>, <span class="string">'L'</span>, <span class="string">'L'</span>, <span class="string">'O'</span> &#125;;</span><br><span class="line"> </span><br><span class="line">        System.out.println( <span class="string">"整型数组元素为:"</span> );</span><br><span class="line">        printArray( intArray  ); <span class="comment">// 传递一个整型数组</span></span><br><span class="line"> </span><br><span class="line">        System.out.println( <span class="string">"\n双精度型数组元素为:"</span> );</span><br><span class="line">        printArray( doubleArray ); <span class="comment">// 传递一个双精度型数组</span></span><br><span class="line"> </span><br><span class="line">        System.out.println( <span class="string">"\n字符型数组元素为:"</span> );</span><br><span class="line">        printArray( charArray ); <span class="comment">// 传递一个字符型数组</span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><p>　　泛型类的声明和非泛型类的声明类似，除了在类名后面添加了类型参数声明部分。</p><p>　　和泛型方法一样，泛型类的类型参数声明部分也包含一个或多个类型参数，参数间用逗号隔开。一个泛型参数，也被称为一个类型变量，是用于指定一个泛型类型名称的标识符。因为他们接受一个或多个参数，这些类被称为参数化的类或参数化的类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Box</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">private</span> T t;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.t = t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Box&lt;Integer&gt; integerBox = <span class="keyword">new</span> Box&lt;Integer&gt;();</span><br><span class="line">    Box&lt;String&gt; stringBox = <span class="keyword">new</span> Box&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">    integerBox.add(<span class="keyword">new</span> Integer(<span class="number">10</span>));</span><br><span class="line">    stringBox.add(<span class="keyword">new</span> String(<span class="string">"菜鸟教程"</span>));</span><br><span class="line"></span><br><span class="line">    System.out.printf(<span class="string">"整型值为 :%d\n\n"</span>, integerBox.get());</span><br><span class="line">    System.out.printf(<span class="string">"字符串为 :%s\n"</span>, stringBox.get());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类型通配符"><a href="#类型通配符" class="headerlink" title="类型通配符"></a>类型通配符</h3><ol><li><p>类型通配符一般是使用 <code>?</code> 代替具体的类型参数。例如  <code>List&lt;?&gt;</code> 在逻辑上是 <code>List&lt;String&gt;</code>，<code>List&lt;Integer&gt;</code> 等所有 <strong>List&lt;具体类型实参&gt;</strong> 的父类。  </p></li><li><p>类型通配符上限通过形如 List 来定义，如此定义就是通配符泛型值接受 Number 及其下层子类类型。  </p></li><li><p>类型通配符下限通过形如 List&lt;? super Number&gt; 来定义，表示类型只能接受 Number 及其三层父类类型，如 Objec 类型的实例。  </p></li></ol><p>参考资料：</p><ul><li><a href="https://www.cnblogs.com/demingblog/p/5495610.html" target="_blank" rel="noopener">Java 泛型，了解这些就够用了。 - 逃离沙漠 - 博客园</a></li><li><a href="https://www.cnblogs.com/xltcjylove/p/3671943.html" target="_blank" rel="noopener">【Java心得总结四】Java泛型下——万恶的擦除 - xlturing - 博客园</a></li><li><a href="https://juejin.im/post/5ca1d19c51882543d719e193" target="_blank" rel="noopener">Java 泛型原理</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 反射</title>
      <link href="/2019/04/01/%E5%8F%8D%E5%B0%84/"/>
      <url>/2019/04/01/%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><blockquote><p>运行一个程序需要先将类加载到运行时数据区，同时会将类的结构信息保存到方法区中，同时会在堆区中创建一个特殊的对象，可以使用该对象操作方法区中类的信息，那么这个特殊的对象是什么类型呢？该对象Java提供了Class类型表示。其实每个类只要加载之后都会对应有自己的这个特特殊类对象，可以使用这个特殊类对象操作方法区中的类信息结构，这种方式就是反射机制。<br>　　<br>　　<a id="more"></a></p></blockquote><p>　　反射是什么呢？当我们的程序在运行时，需要动态的加载一些类这些类可能之前用不到所以不用加载到 JVM，而是在运行时根据需要才加载，这样的好处对于服务器来说不言而喻。</p><p>　　举个例子我们的项目底层有时是用 mysql，有时用 oracle，需要动态地根据实际情况加载驱动类，这个时候反射就有用了，假设 com.java.dbtest.myqlConnection，com.java.dbtest.oracleConnection 这两个类我们要用，这时候我们的程序就写得比较动态化，通过 Class tc = Class.forName(“com.java.dbtest.TestConnection”); 通过类的全类名让 JVM 在服务器中找到并加载这个类，而如果是 Oracle 则传入的参数就变成另一个了。这时候就可以看到反射的好处了，这个动态性就体现出 Java 的特性了！</p><p>　　举多个例子，大家如果接触过 spring，会发现当你配置各种各样的 bean 时，是以配置文件的形式配置的，你需要用到哪些 bean 就配哪些，spring 容器就会根据你的需求去动态加载，你的程序就能健壮地运行。</p><h3 id="什么是反射"><a href="#什么是反射" class="headerlink" title="什么是反射"></a>什么是反射</h3><p>　　反射 (Reflection) 是 Java 程序开发语言的特征之一，它允许运行中的 Java 程序获取自身的信息，并且可以操作类或对象的内部属性。通过 Class 获取 class 信息称之为反射（Reflection）</p><p>　　简而言之，通过反射，我们可以在运行时获得程序或程序集中每一个类型的成员和成员的信息。</p><p>　　程序中一般的对象的类型都是在编译期就确定下来的，而 Java 反射机制可以动态地创建对象并调用其属性，这样的对象的类型在编译期是未知的。所以我们可以通过反射机制直接创建对象，即使这个对象的类型在编译期是未知的。</p><p>　　反射的核心是 JVM 在运行时才动态加载类或调用方法/访问属性，它不需要事先（写代码的时候或编译期）知道运行对象是谁。</p><p>　　Java 反射框架主要提供以下功能：</p><p>　　1. 在运行时判断任意一个对象所属的类</p><p>　　2. 在运行时构造任意一个类的对象</p><p>　　3. 在运行时判断任意一个类所具有的成员变量和方法（通过反射甚至可以调用 private 方法）</p><p>　　4. 在运行时调用任意一个对象的方法</p><p>　　<strong>重点</strong>：是运行时而不是编译时</p><h3 id="主要用途"><a href="#主要用途" class="headerlink" title="主要用途"></a>主要用途</h3><p>　　很多人都认为反射在实际的 Java 开发应用中并不广泛，其实不然。</p><p>当我们在使用 IDE （如Eclipse，IDEA）时，当我们输入一个对象或类并想调用它的属性或方法时，一按点号，编译器就会自动列出它的属性或方法，这里就会用到反射。</p><p>　　<strong>反射最重要的用途就是开发各种通用框架</strong></p><p>　　很多框架（比如 Spring ）都是配置化的（比如通过 XML 文件配置 JavaBean,Action 之类的），为了保证框架的通用性，它们可能需要根据配置文件加载不同的对象或类，调用不同的方法，这个时候就必须用到反射——运行时动态加载需要加载的对象。</p><p>　　对与框架开发人员来说，反射虽小但作用非常大，它是各种容器实现的核心。而对于一般的开发者来说，不深入框架开发则用反射用的就会少一点，不过了解一下框架的底层机制有助于丰富自己的编程思想，也是很有益的。</p><h3 id="获得Class对象"><a href="#获得Class对象" class="headerlink" title="获得Class对象"></a>获得Class对象</h3><ol><li>调用运行时类本身的 <code>.class</code> 属性</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class clazz1 = Person.class;</span><br><span class="line">System.out.println(clazz1.getName());</span><br></pre></td></tr></table></figure><ol start="2"><li>通过运行时类的对象获取 <code>getClass();</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line">Class clazz3 = p.getClass();</span><br><span class="line">System.out.println(clazz3.getName());</span><br></pre></td></tr></table></figure><ol start="3"><li>使用 Class 类的 <code>forName</code> 静态方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; forName(String className)</span><br><span class="line"><span class="comment">// 在JDBC开发中常用此方法加载数据库驱动:</span></span><br><span class="line">Class.forName(driver);</span><br></pre></td></tr></table></figure><ol start="4"><li>（了解）通过类的加载器 ClassLoader</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ClassLoader classLoader = <span class="keyword">this</span>.getClass().getClassLoader();</span><br><span class="line">Class clazz5 = classLoader.loadClass(className);</span><br><span class="line">System.out.println(clazz5.getName());</span><br></pre></td></tr></table></figure><p>参考资料：</p><ul><li><a href="https://www.sczyh30.com/posts/Java/java-reflection-1/#%E4%B8%80%E3%80%81%E5%9B%9E%E9%A1%BE%EF%BC%9A%E4%BB%80%E4%B9%88%E6%98%AF%E5%8F%8D%E5%B0%84%EF%BC%9F" target="_blank" rel="noopener">深入解析Java反射（1） - 基础 | 「浮生若梦」 - sczyh30’s blog</a></li><li><a href="https://www.zhihu.com/question/24304289/answer/147529485" target="_blank" rel="noopener">学习java应该如何理解反射？ - 知乎</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 初始化顺序</title>
      <link href="/2019/04/01/Java%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%BA%E5%BA%8F/"/>
      <url>/2019/04/01/Java%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%BA%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="Java程序初始化的顺序是怎么样的"><a href="#Java程序初始化的顺序是怎么样的" class="headerlink" title="Java程序初始化的顺序是怎么样的"></a>Java程序初始化的顺序是怎么样的</h3><p>　　在 Java 语言中，当实例化对象时，对象所在类的所有成员变量首先要进行初始化，只有当所有类成员完成初始化后，才会调用对象所在类的构造函数创建象。<br>　　<br>　　<a id="more"></a></p><h4 id="初始化一般遵循3个原则："><a href="#初始化一般遵循3个原则：" class="headerlink" title="初始化一般遵循3个原则："></a>初始化一般遵循3个原则：</h4><ul><li>静态对象（变量）优先于非静态对象（变量）初始化，静态对象（变量）只初始化一次，而非静态对象（变量）可能会初始化多次；</li><li>父类优先于子类进行初始化；</li><li>按照成员变量的定义顺序进行初始化。 即使变量定义散布于方法定义之中，它们依然在任何方法（包括构造函数）被调用之前先初始化；</li></ul><h4 id="加载顺序"><a href="#加载顺序" class="headerlink" title="加载顺序"></a>加载顺序</h4><ul><li>父类（静态变量、静态语句块）</li><li>子类（静态变量、静态语句块）</li><li>父类（实例变量、普通语句块）</li><li>父类（构造函数）</li><li>子类（实例变量、普通语句块）</li><li>子类（构造函数）</li></ul><h4 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1.父类静态代码块</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"Base static block!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.父类非静态代码块</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"Base block"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4.父类构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Base</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Base constructor!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Derived</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 2.子类静态代码块</span></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Derived static block!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 5.子类非静态代码块</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"Derived block!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 6.子类构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Derived</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Derived constructor!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Derived();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出："><a href="#输出：" class="headerlink" title="输出："></a>输出：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Base static block!</span><br><span class="line">Derived static block!</span><br><span class="line">Base block</span><br><span class="line">Base constructor!</span><br><span class="line">Derived block!</span><br><span class="line">Derived constructor!</span><br></pre></td></tr></table></figure><h4 id="实例2"><a href="#实例2" class="headerlink" title="实例2"></a>实例2</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Log</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> staitc String <span class="title">baseFieldInit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.print(<span class="string">"Base normal field"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> staitc String <span class="title">baseStaticFieldInit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.print(<span class="string">"Base static field"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> staitc String <span class="title">fieldInit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.print(<span class="string">"Normal field"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> staitc String <span class="title">staticFieldInit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.print(<span class="string">"Static field"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> &#123;System.out.println(<span class="string">"Base static block 1"</span>);&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String staticValue=Log.baseStaticFieldInit();</span><br><span class="line"><span class="keyword">static</span> &#123;System.out.println(<span class="string">"Base static block 2"</span>);&#125;</span><br><span class="line">&#123;System.out.println(<span class="string">"Base normal block 1"</span>);&#125;</span><br><span class="line"><span class="keyword">private</span> String value=Log.baseFieldInit();</span><br><span class="line">&#123;System.out.println(<span class="string">"Base normal block 2"</span>);&#125;</span><br><span class="line">Base()&#123;</span><br><span class="line">System.out.println(<span class="string">"Base constructor"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Derived</span> <span class="keyword">extends</span> <span class="title">Base</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> &#123;System.out.println(<span class="string">"Static block 1"</span>);&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String staticValue=Log.staticFieldInit();</span><br><span class="line"><span class="keyword">static</span> &#123;System.out.println(<span class="string">"Static block 2"</span>);&#125;</span><br><span class="line">&#123;System.out.println(<span class="string">"Normal block 1"</span>);&#125;</span><br><span class="line"><span class="keyword">private</span> String value=Log.fieldInit();</span><br><span class="line">&#123;System.out.println(<span class="string">"Normal block 2"</span>);&#125;</span><br><span class="line">Derived() &#123;</span><br><span class="line">System.out.println(<span class="string">"Dervied constructor"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Derived d = <span class="keyword">new</span> Dervied();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Base static block 1</span><br><span class="line">Base static field</span><br><span class="line">Base static block 2</span><br><span class="line">Static block 1</span><br><span class="line">Static field</span><br><span class="line">Static block 2</span><br><span class="line">Base normal block 1</span><br><span class="line">Base normal field</span><br><span class="line">Base normal block 2</span><br><span class="line">Base constructor</span><br><span class="line">Normal block 1</span><br><span class="line">Normal field</span><br><span class="line">Normal block 2</span><br><span class="line">Dervied constructor</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>对象在class文件加载完毕，以及为各成员在方法区开辟好内存空间后，就开始所谓的初始化步骤：  </p><ol><li>基类静态代码块，基类静态成员字段，无优先级，按先后顺序，只有第一次加载类时执行。</li><li>派生类静态代码块，派生类静态成员字段，无优先级，按先后顺序，只有第一次加载类时执行。</li><li>基类普通代码块，基类普通成员字段，无优先级，按先后顺序。</li><li>基类构造函数。</li><li>派生类普通代码块，派生类普通成员字段，无优先级，按先后顺序。</li><li>派生类构造函数。</li></ol><p><strong>1和2的静态过程，只有在类第一次被加载的时候才执行</strong><br>如果创建两个对象：<br>Dervied d1 = new Dervied();<br>Dervied d1 = new Dervied();<br>第二次创建只执行2345.</p><h4 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h4><p>[<a href="https://www.zhihu.com/question/49196023" target="_blank" rel="noopener">https://www.zhihu.com/question/49196023</a><br>] (<a href="https://www.zhihu.com/question/49196023" target="_blank" rel="noopener">https://www.zhihu.com/question/49196023</a>)<br><a href="https://github.com/frank-lam/fullstack-tutorial/blob/master/notes/JavaArchitecture/01-Java%E5%9F%BA%E7%A1%80.md" target="_blank" rel="noopener">https://github.com/frank-lam/fullstack-tutorial</a>  </p>]]></content>
      
      
      <categories>
          
          <category> Java系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
